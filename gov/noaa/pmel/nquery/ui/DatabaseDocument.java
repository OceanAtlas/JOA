/* * $Id: DatabaseDocument.java,v 1.30 2005/11/02 23:05:17 oz Exp $ * * This software is provided by NOAA for full, free and open release.  It is * understood by the recipient/user that NOAA assumes no liability for any * errors contained in the code.  Although this software is released without * conditions or restrictions in its use, it is expected that appropriateanexiconmce * credit be given to its author and to the National Oceanic and Atmospheric * Administration should the software be included by the recipient as an * element in other product development. */package gov.noaa.pmel.nquery.ui;import javaoceanatlas.utility.ButtonMaintainer;import javaoceanatlas.utility.DialogClient;import javaoceanatlas.utility.TenPixelBorder;import gov.noaa.pmel.nquery.resources.NQueryConstants;import gov.noaa.pmel.nquery.specifications.NQMixedLayerCalcSpec;import gov.noaa.pmel.nquery.specifications.NQInterpolationSpecification;import gov.noaa.pmel.nquery.specifications.NQIntegrationSpecification;import javaoceanatlas.utility.RowLayout;import java.awt.event.ItemListener;import gov.noaa.pmel.nquery.utility.Logger;import javax.swing.event.DocumentListener;import java.awt.event.ActionListener;import java.util.Vector;import gov.noaa.pmel.eps2.PointerFileAttributes;import java.util.ArrayList;import gov.noaa.pmel.nquery.database.DatabaseStructure;import java.util.ResourceBundle;import java.io.File;import javax.swing.JTextArea;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JLabel;import java.awt.Rectangle;import java.awt.Dimension;import java.awt.Toolkit;import gov.noaa.pmel.nquery.database.DatabaseTools;import java.sql.Connection;import org.xml.sax.Parser;import org.xml.sax.HandlerBase;import org.xml.sax.SAXException;import org.xml.sax.AttributeList;import java.awt.event.WindowAdapter;import java.awt.event.WindowListener;import javax.swing.event.DocumentEvent;import javax.swing.JPanel;import java.awt.BorderLayout;import java.awt.Cursor;import javax.swing.border.TitledBorder;import javax.swing.BorderFactory;import javax.swing.JScrollPane;import javaoceanatlas.utility.Orientation;import java.awt.FlowLayout;import java.awt.event.ItemEvent;import java.awt.event.ActionEvent;import gov.noaa.pmel.nquery.utility.ProfileResults;import gov.noaa.pmel.nquery.utility.NQueryFormulas;import javax.swing.JDialog;import java.util.Hashtable;import java.util.Iterator;import java.util.Timer;import java.util.TimerTask;import gov.noaa.pmel.eps2.CalculatedVariable;import gov.noaa.pmel.nc2.station.StationCollection;import gov.noaa.pmel.nc2.station.GeoDomain;import gov.noaa.pmel.util.GeoDate;import gov.noaa.pmel.eps2.dapper.DapperNcFile;import gov.noaa.pmel.nc2.station.StationDataset;import gov.noaa.pmel.eps2.EpicPtr;import gov.noaa.pmel.eps2.EPSConstants;import gov.noaa.pmel.eps2.Dbase;import gov.noaa.pmel.eps2.DapperNetCDFReader;import gov.noaa.pmel.nquery.utility.SingleProfileResult;import gov.noaa.pmel.eps2.Axis;import gov.noaa.pmel.eps2.EPS_Util;import gov.noaa.pmel.eps2.EpicPtrs;import gov.noaa.pmel.eps2.EpicPtrFileWriter;import java.sql.ResultSet;import gov.noaa.pmel.eps2.ExportVariable;import gov.noaa.pmel.eps2.ExportFileSet;import gov.noaa.pmel.eps2.ExportStation;import gov.noaa.pmel.eps2.ExportDate;import gov.noaa.pmel.eps2.ExportTime;import gov.noaa.pmel.eps2.ExportVertical;import gov.noaa.pmel.eps2.EPSDbase;import gov.noaa.pmel.eps2.EPSDBIterator;import gov.noaa.pmel.eps2.SubDBIterator;import gov.noaa.pmel.eps2.HydroAttributes;import gov.noaa.pmel.eps2.EPSAttribute;import com.ibm.xml.parser.TXDocument;import java.io.FileWriter;import java.awt.Component;import ucar.multiarray.MultiArray;import gov.noaa.pmel.eps2.EPSVariable;import ucar.multiarray.ArrayMultiArray;import org.w3c.dom.Document;import org.w3c.dom.Element;import gov.noaa.pmel.nquery.utility.NQueryCalculation;import javaoceanatlas.ui.JOAViewer;import javaoceanatlas.ui.JOAWindow;import javaoceanatlas.ui.RubberbandPanel;import javaoceanatlas.ui.JOAMenuBar;import javaoceanatlas.PowerOceanAtlas;import javaoceanatlas.events.WindowsMenuChangedListener;import javaoceanatlas.events.WindowsMenuChangedEvent;import javax.swing.JOptionPane;import javax.swing.JFrame;/** * <code>DatabaseDocument</code> is created when you initiate a create DB action * * @author John Osborne * @version $Revision: 1.30 $, $Date: 2005/11/02 23:05:17 $ */public class DatabaseDocument extends JOAWindow implements ButtonMaintainer, DialogClient, ActionListener, ItemListener,    Logger, DocumentListener, JOAViewer, WindowsMenuChangedListener {  private String mDBName;  private Vector<String> mColumnNames = new Vector<String>();  private PointerFileAttributes mGlobalAttributes;  private ArrayList mFileSets;  private DatabaseStructure dbStruct;  private boolean inNamedSection = true;  private boolean inUnnamedSection = false;  private int mUnknownSectionCtr = 0;  private NQVariableInspector mParent;  private javax.swing.JButton createQueryButton = new javax.swing.JButton();  private javax.swing.JButton createAboutButton = new javax.swing.JButton();  private javax.swing.JButton clearLogButton = new javax.swing.JButton();  private javax.swing.JButton loginButton = new javax.swing.JButton();  private javax.swing.JButton commandButton = new javax.swing.JButton();  private ResourceBundle b = ResourceBundle.getBundle("gov.noaa.pmel.nquery.resources.NQueryResources");  private File mFile;  private JTextArea mLogMessages = null;  private boolean mDBCreatedFlag = false;  // controls for query interface  private JButton mOKBtn = null;  private JButton mCancelButton = null;  private JComboBox mLogicCB;  private PreviewPanel mPreviewPanel;	private Timer timer = new Timer();  private NQCriteriaContainer mCriteriaCont;  private String mDBURI;  private String mDBPort;  private String mDBUser;  private String mDBPwd;  private String mDBComment;  private JLabel lpLabel1;  private JLabel lpLabel2;  private static int NO_KEY = 0;  private static int DBNAMEKEY = 1;  private static int DBCOMMENTSKEY = 2;  private static int DBURIKEY = 3;  private static int DBPORTKEY = 4;  private static int DBUSERNAMEKEY = 5;  private static int KEY_STATE = NO_KEY;  private MyScroller criteriaScroller;  private String mCmd = null;  private boolean mCanCalcProfiles = false;  private boolean mCanCalcTS = false;  private String mDapperServer;  private String mDataSet;  private boolean DEBUG = false;  private boolean DEBUG2 = false;  NQCriterionPanel mCriterionPanel = null;  public DatabaseDocument(File inDoc) {    super(true, true, true, true, true, null);    // parse the incoming XML file    try {      Class c = Class.forName("com.ibm.xml.parser.SAXDriver");      Parser parser = (org.xml.sax.Parser)c.newInstance();      DBDocNotifyStr notifyStr = new DBDocNotifyStr();      parser.setDocumentHandler(notifyStr);      parser.parse(inDoc.getPath());    }    catch (Exception ex) {      ex.printStackTrace();    }    setSize(800, 800);    this.setTitle(mDBName);    init();    // show dialog at center of screen    Rectangle dBounds = this.getBounds();    Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();    int x = sd.width / 2 - dBounds.width / 2;    int y = sd.height / 2 - dBounds.height / 2;    this.setLocation(x, y);    if (NQueryConstants.DEFAULT_DEBUG_MODE) {      logMessage("mDBName = " + mDBName, true);      logMessage("mDBComment = " + mDBComment, true);      logMessage("mDBURI = " + mDBURI, true);      logMessage("mDBPort = " + mDBPort, true);      logMessage("mDBUser = " + mDBUser, true);    }    // set the state of the query popup    DatabaseTools.setLogger(this);    clearMsgLog();    this.logMessage("Reading database structure for " + mDBName + "...", true);    // prompt for password    AskForPassword ask = new AskForPassword(this, this);    ask.pack();    ask.setVisible(true);    if (mDBPwd != null) {      try {        // attempt to authenticate with database        DatabaseTools.setUpAuthentication(mDBURI, mDBPort, mDBUser, mDBPwd);        Connection c = DatabaseTools.createConnection();        try {          if (DatabaseTools.isDatabase(mDBName)) {            // get the column names for the database            String tableData = new String("data");            mCriteriaCont.setParams(DatabaseTools.getColumnNames(mDBName, tableData, 20));            logMessage("Database ready!", true);            mDBCreatedFlag = true;            // change text of button            loginButton.setText(b.getString("kLogOff"));            loginButton.invalidate();            loginButton.validate();          }          else {            logMessage("An error occurred trying to connect to: " + mDBName, true);            logMessage(mDBName + " doesn't exist.", true);          }        }        catch (Exception exx) {          if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {            logMessage("An exception was generated creating the database--refer to console output", true);            exx.printStackTrace();          }          logMessage("An error occurred trying to get column names in: " + mDBName, true);          logMessage("    Turn on Debug mode in Preferences and try logging on again.", true);        }      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          logMessage("An exception was generated creating the database--refer to console output", true);          ex.printStackTrace();        }        // notify        logMessage("An error occurred trying to connect to: " + mDBName, true);        logMessage("    The password you entered may be incorrect--log on again.", true);      }    }    else {      logMessage("A password is required for this database--log on again.", true);    }  }	public void runTimer() {		TimerTask task = new TimerTask() {			public void run() {				maintainButtons();			}		};		timer.schedule(task, 0, 1000);	}  private class DBDocNotifyStr extends HandlerBase {    public void startDocument() throws SAXException {    }    public void startElement(String name, AttributeList amap) throws SAXException {      if (name.equals("dbname")) {        KEY_STATE = DBNAMEKEY;      }      else if (name.equals("comments")) {        KEY_STATE = DBCOMMENTSKEY;      }      else if (name.equals("serveruri")) {        KEY_STATE = DBURIKEY;      }      else if (name.equals("serverport")) {        KEY_STATE = DBPORTKEY;      }      else if (name.equals("username")) {        KEY_STATE = DBUSERNAMEKEY;      }      else {        KEY_STATE = NO_KEY;      }    }    public void characters(char[] ch, int start, int len) throws SAXException {      String strVal = new String(ch, start, len);      if (KEY_STATE == DBNAMEKEY) {        mDBName = new String(strVal);      }      else if (KEY_STATE == DBCOMMENTSKEY) {        mDBComment = new String(strVal);      }      else if (KEY_STATE == DBURIKEY) {        mDBURI = new String(strVal);      }      else if (KEY_STATE == DBPORTKEY) {        mDBPort = new String(strVal);      }      else if (KEY_STATE == DBUSERNAMEKEY) {        mDBUser = new String(strVal);      }    }    public void endElement(String name) throws SAXException {}  }  public DatabaseDocument(NQVariableInspector par, File file, String dbName, PointerFileAttributes globalAttributes,                          ArrayList fileSets, String dburi, String dbport, String dbuser, String dbpass, String dbcomment, String datasetName, String serverName) {    super(true, true, true, true, true, null);    mParent = par;    mFile = file;    mDBName = new String(dbName);    mGlobalAttributes = globalAttributes;    mFileSets = fileSets;		mDBURI = new String(dburi);		mDBPort = new String(dbport);		mDBUser = new String(dbuser);		mDBPwd = new String(dbpass);    mDBComment = new String(dbcomment);    mDapperServer = serverName;    mDataSet = datasetName;    setSize(800, 800);    this.setTitle(mDBName);    init();    DatabaseTools.setLogger(this);    clearMsgLog();    this.logMessage("Creating database " + mDBName + "...", true);    CreateDBThread cdb = new CreateDBThread(mColumnNames);    cdb.setPriority(Thread.NORM_PRIORITY - 1);    cdb.startCreate();  }  public void changedUpdate(DocumentEvent evt) {    //System.out.println(evt.toString());    //System.out.println(mLogMessages.getSelectedText());  }  public void insertUpdate(DocumentEvent evt) {    //System.out.println(evt.toString());    //System.out.println(mLogMessages.getSelectedText());  }  public void removeUpdate(DocumentEvent evt) {    //System.out.println(evt.toString());    //System.out.println(mLogMessages.getSelectedText());  }  public void init() {    WindowListener windowListener = new WindowAdapter() {      public void windowClosing(java.awt.event.WindowEvent e) {        closeMe();      }    };    this.addWindowListener(windowListener);    // UI for this window has a progress area showing where DB build and ingest are in their process    JPanel queryPanel = new JPanel();    queryPanel.setLayout(new BorderLayout(5, 5));    JPanel logPanel = new JPanel();    logPanel.setLayout(new BorderLayout(5, 5));    mLogMessages = new JTextArea(20, 35);    mLogMessages.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));    mLogMessages.setLineWrap(true);    mLogMessages.setWrapStyleWord(true);    mLogMessages.setEditable(false);    mLogMessages.getDocument().addDocumentListener(this);    TitledBorder tb = BorderFactory.createTitledBorder(b.getString("kLog"));    logPanel.setBorder(tb);    JScrollPane logScroller = new JScrollPane(mLogMessages);    logPanel.add(logScroller, "Center");    this.getContentPane().add("North", logPanel);    // Query UI    // criteria panel    mCriteriaCont = new NQCriteriaContainer(this, null);    // Scroller hold the criteria    criteriaScroller = new MyScroller(new TenPixelBorder(mCriteriaCont, 5, 5, 5, 5));    // initialize the Criteria Container with the and/or combo and the first Criterion Panel    Vector logicChoices = new Vector();    logicChoices.add(new String(b.getString("kany")));    logicChoices.add(new String(b.getString("kall")));    mLogicCB = new JComboBox(logicChoices);    mLogicCB.addItemListener(this);    JPanel logicPanel = new JPanel();    logicPanel.setLayout(new RowLayout(Orientation.LEFT, Orientation.CENTER, 0));    lpLabel1 = new JLabel(b.getString("kIf") + " ");    lpLabel2 = new JLabel(" " + b.getString("kFollowing"));    logicPanel.add(lpLabel1);    logicPanel.add(mLogicCB);    logicPanel.add(lpLabel2);    mCriterionPanel = new NQCriterionPanel(null, true, mCriteriaCont);    mCriteriaCont.add(mCriterionPanel);    // build the preview panel    mPreviewPanel = new PreviewPanel();    // build the upper panel    queryPanel.add(logicPanel, "North");    queryPanel.add(criteriaScroller, "Center");    queryPanel.add(mPreviewPanel, "South");    tb = BorderFactory.createTitledBorder(b.getString("kQueryDatabase"));    queryPanel.setBorder(tb);    this.getContentPane().add("Center", queryPanel);    JPanel buttonPanel = new javax.swing.JPanel();    buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));    loginButton.setText(b.getString("kLogOn"));    loginButton.setActionCommand("loginoroff");    loginButton.addActionListener(this);    buttonPanel.add(loginButton);    clearLogButton.setText(b.getString("kClearLog"));    clearLogButton.setActionCommand("clearlog");    clearLogButton.addActionListener(this);    buttonPanel.add(clearLogButton);    createAboutButton.setText(b.getString("kAboutDatabase"));    createAboutButton.setActionCommand("getabout");    createAboutButton.addActionListener(this);    buttonPanel.add(createAboutButton);    getContentPane().add(buttonPanel, "South");    createQueryButton.setText(b.getString("kQueryDB"));    createQueryButton.setActionCommand("createquery");    createQueryButton.addActionListener(this);    this.getRootPane().setDefaultButton(createQueryButton);    buttonPanel.add(createQueryButton);    commandButton.setText(b.getString("kCommand2"));    commandButton.setActionCommand("command");    commandButton.addActionListener(this);    buttonPanel.add(commandButton);    getContentPane().add(buttonPanel, "South");    PowerOceanAtlas.getInstance().addWindowsMenuChangedListener(this);    mMenuBar = new JOAMenuBar(this, false, false, null);    PowerOceanAtlas.getInstance().addOpenFileViewer(this);    WindowsMenuChangedEvent pce = new WindowsMenuChangedEvent(PowerOceanAtlas.getInstance());    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(pce);		runTimer();  }  public void itemStateChanged(ItemEvent evt) {    if (evt.getSource() instanceof JComboBox) {      JComboBox cb = (JComboBox)evt.getSource();      if (cb == mLogicCB && evt.getStateChange() == ItemEvent.SELECTED) {        this.setClausePreview();      }    }  }  public void actionPerformed(ActionEvent e) {    String cmd = e.getActionCommand();    doCommand(e);  }  public void doCommand(ActionEvent e) {    String cmd = e.getActionCommand();    if (cmd.equals("cancel")) {      timer.cancel();      mCriterionPanel.closeMe();      this.dispose();    }    else if (cmd.equals("close")) {      closeMe();      timer.cancel();      mCriterionPanel.closeMe();      this.dispose();    }    else if (cmd.equals("about")) {      AboutNQueryDialog ff = new AboutNQueryDialog(this, true);      //ff.init();      ff.pack();      // show dialog at center of screen      Rectangle dBounds = ff.getBounds();      Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();      int x = sd.width / 2 - dBounds.width / 2;      int y = sd.height / 2 - dBounds.height / 2;      ff.setLocation(x, y);      ff.setVisible(true);    }    else if (cmd.equals("command")) {      // command text      AskForCommand ask = new AskForCommand(this, this);      ask.pack();      ask.setVisible(true);      if (mCmd != null) {        try {          DatabaseTools.customCommand(mCmd, mDBName);        }        catch (Exception ex) {          ex.printStackTrace();        }      }    }    else if (cmd.equals("createquery")) {      // search the database      try {        ResultSet results = DatabaseTools.selectData(mPreviewPanel.getContents(), mDBName);        // get the number of matches        int count = 0;        while (results.next()) {          count++;        }        results.first();        if (count > 0) {          this.logMessage("Number items matching query: " + count, true);        }        else {          this.logMessage("No matches found!", true);        }        if (results != null && count > 0) {          NQQueryResults resultWindow = new NQQueryResults(results, mDBName, getClauseString(true));          NQueryFormulas.centerFrameOnScreen(resultWindow, false);          resultWindow.setVisible(true);        }        else {          //preset error alert        }      }      catch (Exception ex) {        ex.printStackTrace();      }    }    else if (cmd.equals("getabout")) {      // get columns in the database      try {        String tableItem = new String("item");        String tableData = new String("data");        Vector results = DatabaseTools.getColumnNames(mDBName, tableData, -99);        if (results != null) {          DisplayColumns resultWindow = new DisplayColumns(results, mDBName);          // show dialog at center of screen          Rectangle dBounds = resultWindow.getBounds();          Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();          int x = sd.width / 2 - dBounds.width / 2;          int y = sd.height / 2 - dBounds.height / 2;          resultWindow.setLocation(x, y);          resultWindow.setVisible(true);        }        else {          //preset error alert        }      }      catch (Exception ex) {      	ex.printStackTrace();        JFrame f = new JFrame("Database Error");        Toolkit.getDefaultToolkit().beep();        JOptionPane.showMessageDialog(f, "An error occurred accessing a database--try logging on again.");      }    }    else if (cmd.equals("clearlog")) {      // clear the message log      mLogMessages.setText("");    }    else if (cmd.equals("loginoroff")) {      // logg off or on the database      if (mDBCreatedFlag) {        // log off the database        mDBPwd = "";        mDBCreatedFlag = false;        // change text of button        loginButton.setText(b.getString("kLogOn"));        loginButton.invalidate();        loginButton.validate();      }      else {        // prompt for password        AskForPassword ask = new AskForPassword(this, this);        ask.pack();        ask.setVisible(true);        if (mDBPwd != null) {          try {            // attempt to authenticate with database            DatabaseTools.setUpAuthentication(mDBURI, mDBPort, mDBUser, mDBPwd);            Connection c = DatabaseTools.createConnection();            try {              if (DatabaseTools.isDatabase(mDBName)) {                // get the column names for the database                String tableData = new String("data");                mCriteriaCont.setParams(DatabaseTools.getColumnNames(mDBName, tableData, 20));                logMessage("Database ready!", true);                mDBCreatedFlag = true;                // change text of button                loginButton.setText(b.getString("kLogOff"));                loginButton.invalidate();                loginButton.validate();              }              else {                logMessage("An error occurred trying to connect to: " + mDBName, true);                logMessage(mDBName + " doesn't exist.", true);              }            }            catch (Exception exx) {              if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {                logMessage("An exception was generated creating the database--refer to console output", true);                exx.printStackTrace();              }              logMessage("An error occurred trying to get column names in: " + mDBName, true);              logMessage("    Turn on Debug mode in Preferences and try logging on again.", true);            }          }          catch (Exception ex) {            if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {              logMessage("An exception was generated creating the database--refer to console output", true);              ex.printStackTrace();            }            // notify            logMessage("An error occurred trying to connect to: " + mDBName, true);            logMessage("    The password you entered may be incorrect--log on again.", true);          }        }        else {          logMessage("A password is required for this database--log on again.", true);        }      }    }  }  public void scroll() {    criteriaScroller.scrollRectToVisible(new Rectangle(1000, 1000, 1000, 1000));  }  public void dialogDismissed(JDialog d) {    try {      mDBPwd = null;      mDBPwd = ((AskForPassword)d).getPassword();    }    catch (ClassCastException ex) {      mCmd = null;      mCmd = ((AskForCommand)d).getCommand();    }  }  // Cancel button  public void dialogCancelled(JDialog d) {    ;  }  // something other than the OK button  public void dialogDismissedTwo(JDialog d) {    ;  }  // Apply button, OK w/o dismissing the dialog  public void dialogApply(JDialog d) {    ;  }  // Apply button, OK w/o dismissing the dialog  public void dialogApplyTwo(Object d) {    ;  }  public void maintainButtons() {    // test whether creation thread is completed    if (mDBCreatedFlag) {      if (mCriteriaCont.isQueryComplete() && !createQueryButton.isEnabled()) {        createQueryButton.setEnabled(true);      }      else if (!mCriteriaCont.isQueryComplete() && createQueryButton.isEnabled()) {        createQueryButton.setEnabled(false);      }      if (!mLogicCB.isEnabled()) {        mLogicCB.setEnabled(true);        lpLabel1.setEnabled(true);        lpLabel2.setEnabled(true);      }      // enable the query panel if necessary      if (!mCriteriaCont.isEnabled()) {        mCriteriaCont.setEnabled(true);        mPreviewPanel.setEnabled(true);      }      // test for any changes in the conditions      if (mCriteriaCont.isChanged()) {        setClausePreview();      }    }    else {      if (createQueryButton.isEnabled()) {        createQueryButton.setEnabled(false);      }      if (mLogicCB.isEnabled()) {        mLogicCB.setEnabled(false);        lpLabel1.setEnabled(false);        lpLabel2.setEnabled(false);      }      // todo activate the stop button      // disable the query panel      if (mCriteriaCont.isEnabled()) {        mCriteriaCont.setEnabled(false);        mPreviewPanel.setEnabled(true);      }    }  }  private class CreateDBThread extends Thread {    Vector mResults;    int dupVarCnt = 1;    Hashtable uniqueNames = new Hashtable();    public CreateDBThread(Vector results) {      mResults = results;    }    public void startCreate() {      if (isAlive()) {        super.resume();      }      else {        start();      }    }    public void endCreate() {      if (isAlive()) {        try {          stop();        }        catch (Exception ex) {}      }    }    public void run() {      createDB();    }    private String getUniqueName(String s) {      // get value from hashtable      Integer cnt = (Integer)uniqueNames.get(s);      if (cnt != null) {        int c = cnt.intValue();        int nc = c + 1;        uniqueNames.remove(s);        uniqueNames.put(s, new Integer(nc));        cnt = (Integer)uniqueNames.get(s);        String uname = s + "_" + String.valueOf(nc);        return uname;      }      // get here, name is unique      uniqueNames.put(s, new Integer(0));      return s;    }    public void createDB() {      // method creates the database in MySQL      Vector colTypes = new Vector();      String tableItem = new String("item");      String tableData = new String("data");      DatabaseStructure dbStruct = new DatabaseStructure(mDBName);      Iterator itor = mParent.getProfileVariables().iterator();      while (itor.hasNext()) {        VariableNode var = (VariableNode)itor.next();        String name = var.getName();        name = name.trim().replace('+', 'p');        name = name.replace('-', '_');        name = getUniqueName(name);        if (var instanceof CalculatedVariableNode) {          CalculatedVariableNode cvar = (CalculatedVariableNode)var;          CalculatedVariable calcVar = cvar.getCalcVar();          if (calcVar.isStationVar()) {            mResults.addElement(name);            colTypes.addElement("DOUBLE");            dbStruct.addEntry(name, name);            continue;          }        }        if (NQueryConstants.DEFAULT_CALC_MAX) {          mResults.addElement(name + "_max");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_max");        }        if (NQueryConstants.DEFAULT_CALC_MIN) {          mResults.addElement(name + "_min");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_min");        }        if (NQueryConstants.DEFAULT_CALC_DEPTH_OF_MAX) {          mResults.addElement(name + "_depth_of_max");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_depth_of_max");        }        if (NQueryConstants.DEFAULT_CALC_DEPTH_OF_MIN) {          mResults.addElement(name + "_depth_of_min");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_depth_of_min");        }        if (NQueryConstants.DEFAULT_MAX_DEPTH_OF_NONMISSING_VAL) {          mResults.addElement(name + "_max_depth_of_nonmissing");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_max_depth_of_nonmissing");        }        if (NQueryConstants.DEFAULT_MIN_DEPTH_OF_NONMISSING_VAL) {          mResults.addElement(name + "_min_depth_of_nonmissing");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_min_depth_of_nonmissing");        }        if (NQueryConstants.DEFAULT_CALC_AVERAGE) {          mResults.addElement(name + "_mean");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_mean");        }        if (NQueryConstants.DEFAULT_CALC_N) {          mResults.addElement(name + "_n");          colTypes.addElement("DOUBLE");          dbStruct.addEntry(name, name + "_n");        }      }      // Hashtable ht = dbStruct.getAddedVars();      /// for ( Enumeration e = ht.elements(); e.hasMoreElements(); ) {      // 		String item = (String) e.nextElement();      //      System.out.println("Item created = " + item);      // }      try {        DatabaseTools.setUpAuthentication(mDBURI, mDBPort, mDBUser, mDBPwd);        if (DatabaseTools.isDatabase(mDBName)) {          DatabaseTools.dropDatabase(mDBName);          DatabaseTools.createDatabase(mDBName);          DatabaseTools.createTable(mDBName, tableItem, "item_id", "VARCHAR(254)", true);          DatabaseTools.createTable(mDBName, tableData, "item_id", "VARCHAR(254)", true);          DatabaseTools.createColumn(mDBName, tableItem, "data_type", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "fileset", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "id", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "longitude", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "latitude", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "zmin", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "zmax", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "zunits", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "date", "DATETIME");          DatabaseTools.createColumn(mDBName, tableItem, "start_time", "DATETIME");          DatabaseTools.createColumn(mDBName, tableItem, "end_time", "DATETIME");          DatabaseTools.createColumn(mDBName, tableItem, "variables", "TEXT");          DatabaseTools.createColumn(mDBName, tableItem, "units", "TEXT");          DatabaseTools.createColumn(mDBName, tableItem, "lexicon", "VARCHAR(254)");          DatabaseTools.createColumndata(mDBName, tableData, mResults, colTypes);          DatabaseTools.getColumnNames(mDBName, tableData, -99);        }        else {          DatabaseTools.createDatabase(mDBName);          DatabaseTools.createTable(mDBName, tableItem, "item_id", "VARCHAR(254)", true);          DatabaseTools.createTable(mDBName, tableData, "item_id", "VARCHAR(254)", true);          DatabaseTools.createColumn(mDBName, tableItem, "data_type", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "fileset", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "id", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "longitude", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "latitude", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "zmin", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "zmax", "DOUBLE");          DatabaseTools.createColumn(mDBName, tableItem, "zunits", "VARCHAR(254)");          DatabaseTools.createColumn(mDBName, tableItem, "date", "DATETIME");          DatabaseTools.createColumn(mDBName, tableItem, "start_time", "DATETIME");          DatabaseTools.createColumn(mDBName, tableItem, "end_time", "DATETIME");          DatabaseTools.createColumn(mDBName, tableItem, "variables", "TEXT");          DatabaseTools.createColumn(mDBName, tableItem, "units", "TEXT");          DatabaseTools.createColumn(mDBName, tableItem, "lexicon", "VARCHAR(254)");          DatabaseTools.createColumndata(mDBName, tableData, mResults, colTypes);          DatabaseTools.getColumnNames(mDBName, tableData, -99);        }      }      catch (Exception e) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          logMessage("An exception was generated creating the database--refer to console output", true);          e.printStackTrace();        }        // stop this thread        logMessage("Database creation failed because of errors--turn on debug option in preferences.", true);        endCreate();      }      // ingest the data      if (mParent.isDapper()) {        ingestDapperData();      }      else {        ingestData();      }      // save the database document      // make the destination file      saveDB();      logMessage("Database document saved", true);      mDBCreatedFlag = true;      logMessage("Database created", true);      // populate the query panel with column names      mCriteriaCont.setParams(mColumnNames);    }  }  public boolean ingestDapperData() {    StationCollection coll = mParent.getStationCollection();    String[] varsArr = coll.getCollectionVariables();    String[] unitsArr = coll.getCollectionVariablesUnits();    GeoDomain[] refs = mParent.getStnRefs();    Iterator stIter = coll.getStationIterator(refs, null);    String dataType = coll.getDataType();    String lexicon = "EPIC/Dapper";    String variables = "";    String units = "";    for (int i = 0; i < varsArr.length; i++) {      variables += varsArr[i];      units += unitsArr[i];      if (i < varsArr.length - 1) {        variables += ",";        units += ",";      }    }    /*if (variables.length() > 255)     variables = variables.substring(0, 254);       if (units.length() > 255)     units = units.substring(0, 254);*/    // ingest the files    Vector dbases = new Vector();    int c = 0;    double lat = NQueryConstants.MISSINGVALUE, lon = NQueryConstants.MISSINGVALUE, zMn = NQueryConstants.MISSINGVALUE,        zMx = NQueryConstants.MISSINGVALUE;    GeoDate date;    String path = coll.getPathName();    while (stIter.hasNext()) {      DapperNcFile ncFile = new DapperNcFile((StationDataset)stIter.next());      GeoDomain domain = refs[c];      if (domain.hasNorthLat()) {        lat = domain.getNorthLat();      }      else if (domain.hasSouthLat()) {        lat = domain.getSouthLat();      }      if (domain.hasEastLon()) {        lon = domain.getEastLon();      }      else if (domain.hasWestLon()) {        lon = domain.getWestLon();      }      if (domain.hasMinimumT()) {        date = new GeoDate(domain.getMinimumT());      }      else if (domain.hasMaximumT()) {        date = new GeoDate(domain.getMaximumT());      }      else {        date = new GeoDate();      }      if (domain.hasMinimumZ()) {        zMn = domain.getMinimumZ();      }      if (domain.hasMaximumZ()) {        zMx = domain.getMaximumZ();      }      // isolate just the id part of the filename      String fileID = ncFile.getFileName();      String dsID = fileID.substring(0, fileID.indexOf('&'));      fileID = fileID.substring(fileID.indexOf('&'), fileID.length());      // construct the path to recover this file later via http      String realPath = mDapperServer + "dods//dods/" + dsID + ".dods?_id,lat,lon,time,attributes,profile" + fileID;      if (DEBUG) {        System.out.println("realPath = " + realPath);      }      // construct an EPIC Pointer      EpicPtr ep = new EpicPtr(EPSConstants.NETCDFFORMAT, String.valueOf(domain.getId()), dataType, "Dapper",                               String.valueOf(domain.getId()), lat, lon, date, zMn, zMx, fileID, realPath);      if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {        System.out.println(" ptr = " + ep.toString());      }      // make a file reader object      Dbase dname = new Dbase();      DapperNetCDFReader reader = new DapperNetCDFReader(dname, ncFile, ep);      // parse it and store dbase in Vector      try {        reader.parse();        this.logMessage("Reading " + ep.getFileName() + "...", true);        if (ep.getDataType().equalsIgnoreCase("profile")) {          Vector results = ingestProfile(dname);          String datet = ep.getT().toString();          String dates = ep.getStartTime().toString();          String datee = ep.getEndTime().toString();          datet = datet.trim().substring(0, 19);          dates = dates.trim().substring(0, 19);          datee = datee.trim().substring(0, 19);          boolean firstProfileResult = false;          boolean firstSingleProfileResult = false;          boolean itemEntryWritten = false;          // add results to the database here          for (int i = 0; i < results.size(); i++) {            Object result = results.elementAt(i);            // write the metadata entry            if (!itemEntryWritten) {              itemEntryWritten = true;              String key = "";              if (result instanceof ProfileResults) {                key = ((ProfileResults)result).getDBKey();              }              else {                key = ((SingleProfileResult)result).getDBKey();              }              // attempt to get the z axis units              String zAxUnits = "unk";              Axis depAxis = dname.getAxis("depth");              if (depAxis == null) {                depAxis = dname.getAxis("pres");              }              if (depAxis == null) {                depAxis = dname.getAxis("pressure");              }              if (depAxis == null) {                depAxis = dname.getAxis("p");              }              if (depAxis == null) {                depAxis = dname.getAxis("dep");              }              if (depAxis == null) {                depAxis = dname.getAxis("deph");              }              if (depAxis == null) {                depAxis = dname.getAxis("ctdprs");              }              if (depAxis == null) {                depAxis = dname.getAxis("z");              }              if (depAxis != null) {                zAxUnits = depAxis.getUnits();              }              String lex = NQueryConstants.LEXICON.getLexiconString(dname);              DatabaseTools.updateItem(mDBName, key, "profile", ep.getFileSet(), ep.getID(), ep.getLat(), ep.getLon(),                                       ep.getZMin(), ep.getZMax(), zAxUnits, datet, dates, datee, variables, units, lex);            }            if (result instanceof ProfileResults) {              if (!firstProfileResult) {                ProfileResults profResults = (ProfileResults)result;                if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {                  profResults.dump(this);                }                DatabaseTools.insertData(mDBName, profResults);                firstProfileResult = true;              }              else {                ProfileResults profResults = (ProfileResults)results.elementAt(i);                if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {                  profResults.dump(this);                }                DatabaseTools.updateData(mDBName, profResults);              }            }            else if (result instanceof SingleProfileResult) {              // got a result of a MLD, Intergrationm or Interpolation              SingleProfileResult singleResult = (SingleProfileResult)result;              if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {                singleResult.dump(this);              }              if (!firstSingleProfileResult && !firstProfileResult) {                DatabaseTools.insertData(mDBName, singleResult);                firstSingleProfileResult = false;              }              else {                DatabaseTools.updateData(mDBName, singleResult);                if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {                  singleResult.dump(this);                }              }            }          }        }      }      catch (Exception ex) {        ex.printStackTrace();      }      c++;    }    return true;  }  public boolean ingestData() {    String variables = "";    String units = "";    //This is where data ingest happens    // Now parse the individual files, compute new meta-variables, and put the results in the database    // write a list of internal EPIC Pointers to a temp file    this.logMessage("Ingesting data...", true);    String directory = EPS_Util.getTempDir();    String ptrsName = this.getTitle();    File tFile = new File(directory, ptrsName);    // parse this pointer file to read these into DBases    EpicPtrs ptrDB = new EpicPtrs(tFile);    String ptrFileName = tFile.getName();    String lcName = ptrFileName.toLowerCase();    ptrDB.setWriter(new EpicPtrFileWriter(tFile));    // TODO: should ultimately loop on an arraylist of parsed pointer files    // type would be gotten for each xml file opened    // first find out if there is global path    String globalPath = mGlobalAttributes.getPath();    String usedPath;    if (globalPath != null) {      usedPath = new String(globalPath);    }    String dataType = mGlobalAttributes.getType();    String lexicon = "unk";    ArrayList vars = mGlobalAttributes.getVarList();    for (int i = 0; i < vars.size(); i++) {      ExportVariable evar = (ExportVariable)vars.get(i);      if (i == 0 && evar.getLexicon() != null) {        lexicon = evar.getLexicon();      }      variables += evar.getVarName();      units += evar.getVarUnits();      if (i < vars.size() - 1) {        variables += ",";        units += ",";      }    }    // second loop on the actual filesets and stations in the filesets    ArrayList filePtrs = new ArrayList();    Iterator itor = mFileSets.iterator();    double zmin;    double zmax;    GeoDate tMin = new GeoDate(), tMax = new GeoDate();    this.logMessage("Contructing intermediate pointers", true);    while (itor.hasNext()) {      Object ofs = itor.next();      ExportFileSet fs = (ExportFileSet)ofs;      String localURI = fs.getURI();      if (localURI != null) {        //construct a path to file        usedPath = localURI;      }      else {        usedPath = globalPath;      }      ArrayList stnAL = fs.getStations();      Iterator sitor = stnAL.iterator();      GeoDate stnDate = new GeoDate();      while (sitor.hasNext()) {        ExportStation stn = (ExportStation)sitor.next();        // construct pointer file entries        if (dataType.equalsIgnoreCase("profile")) {          // construct a GeoDate from the time or date object          Object time = stn.getTimesOrDates().get(0);          if (time instanceof ExportDate) {            ExportDate date = (ExportDate)time;            stnDate = date.getGeoDate();          }          else if (time instanceof ExportTime) {            ExportTime date = (ExportTime)time;            stnDate = date.getGeoDate();            // TODO: turn an ExportTime into a GeoDate in EPS          }          // get the depth range          ArrayList z = stn.getVerticals();          Iterator zitor = z.iterator();          zmin = -99;          zmax = -99;          while (zitor.hasNext()) {            ExportVertical vert = (ExportVertical)zitor.next();            if (vert.isTop()) {              zmin = vert.getZ();            }            if (vert.isBottom()) {              zmax = vert.getZ();            }          }          String url;          if (usedPath == null) {            url = stn.getURI();          }          else {            url = usedPath;          }          //System.out.println("stn.getFileName() = " + stn.getFileName());          //System.out.println("url = " + url);          String fname = stn.getFileName();          int lastDelim = fname.lastIndexOf("/");          if (lastDelim >= 0) {            fname = fname.substring(lastDelim + 1, fname.length());          }          EpicPtr epPtr = new EpicPtr(EPSConstants.NETCDFFORMAT, "NQuery", dataType, stn.getFileSet(), stn.getID(),                                      stn.getLat().getLat(), stn.getLon().getLon(), stnDate, zmin, zmax, null, fname,                                      url, null);          ptrDB.setData(epPtr);        }        else if (dataType.equalsIgnoreCase("time-series")) {          ArrayList times = stn.getTimesOrDates();          Iterator titor = times.iterator();          while (titor.hasNext()) {            Object time = titor.next();            if (time instanceof ExportDate) {              ExportDate date = (ExportDate)time;              if (date.isStart()) {                tMin = date.getGeoDate();              }              if (date.isEnd()) {                tMax = date.getGeoDate();              }            }            else if (time instanceof ExportTime) {              ExportTime date = (ExportTime)time;              if (date.isStart()) {                tMin = date.getGeoDate();              }              if (date.isEnd()) {                tMax = date.getGeoDate();              }              // TODO: turn an ExportTime into a GeoDate in EPS            }          }          ArrayList z = stn.getVerticals();          ExportVertical vert = (ExportVertical)z.get(0);          zmin = vert.getZ();          EpicPtr epPtr = new EpicPtr(EPSConstants.NETCDFFORMAT, "NQuery", dataType, zmin, stn.getLat().getLat(),                                      stn.getLon().getLon(), tMin, tMax, stn.getDeltaT(), null, stn.getFileName(),                                      usedPath);          ptrDB.setData(epPtr);        }      }    }    // create a database of pointers    EPSDbase epsDB = new EPSDbase(ptrDB.iterator(), true);    EPSDBIterator dbItor = epsDB.iterator(true);    SubDBIterator sdbItor = null;    int count = 0;    int numDBs = dbItor.size();    EpicPtr ep = null;    while (dbItor != null && dbItor.hasNext()) {      // get the type of database (ptr or section)      try {        Dbase db = (Dbase)dbItor.next();        // get a pointer entry for this dbase        ep = db.getEpicPtr();        if (ep.getPath().indexOf("file:") < 0) {          this.logMessage("Reading file#" + ++count + " " + ep.getPath() + "...", true);        }        else {          this.logMessage("Reading file#" + ++count + " " + ep.getPath() + "/" + ep.getFileName() + "...", true);        }        if (ep.getDataType().equalsIgnoreCase("profile")) {          Vector results = ingestProfile(db);          String datet = ep.getT().toString();          String dates = ep.getStartTime().toString();          String datee = ep.getEndTime().toString();          datet = datet.trim().substring(0, 19);          dates = dates.trim().substring(0, 19);          datee = datee.trim().substring(0, 19);          boolean firstProfileResult = false;          boolean firstSingleProfileResult = false;          boolean itemEntryWritten = false;          for (int i = 0; i < results.size(); i++) {            Object result = results.elementAt(i);            // write the metadata entry            if (!itemEntryWritten) {              itemEntryWritten = true;              String key = "";              if (result instanceof ProfileResults) {                key = ((ProfileResults)result).getDBKey();              }              else {                key = ((SingleProfileResult)result).getDBKey();              }              // attempt to get the z axis units              String zAxUnits = "unk";              Axis depAxis = db.getAxis("depth");              if (depAxis == null) {                depAxis = db.getAxis("pres");              }              if (depAxis == null) {                depAxis = db.getAxis("pressure");              }              if (depAxis == null) {                depAxis = db.getAxis("p");              }              if (depAxis == null) {                depAxis = db.getAxis("dep");              }              if (depAxis == null) {                depAxis = db.getAxis("deph");              }              if (depAxis == null) {                depAxis = db.getAxis("ctdprs");              }              if (depAxis == null) {                depAxis = db.getAxis("z");              }              if (depAxis != null) {                zAxUnits = depAxis.getUnits();              }              if (zAxUnits == null) {                zAxUnits = "unk";              }              String lex = NQueryConstants.LEXICON.getLexiconString(db);              if (lex == null) {                lex = "unk";              }              DatabaseTools.updateItem(mDBName, key, "profile", ep.getFileSet(), ep.getID(), ep.getLat(), ep.getLon(),                                       ep.getZMin(), ep.getZMax(), zAxUnits, datet, dates, datee, variables, units, lex);            }            if (result instanceof ProfileResults) {              if (!firstProfileResult) {                ProfileResults profResults = (ProfileResults)result;                if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {                  profResults.dump();                }                DatabaseTools.insertData(mDBName, profResults);                firstProfileResult = true;              }              else {                ProfileResults profResults = (ProfileResults)results.elementAt(i);                if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {                  profResults.dump();                }                DatabaseTools.updateData(mDBName, profResults);              }            }            else if (result instanceof SingleProfileResult) {              // got a result of a MLD, Intergrationm or Interpolation              SingleProfileResult singleResult = (SingleProfileResult)result;              if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {                singleResult.dump(this);              }              if (!firstSingleProfileResult && !firstProfileResult) {                DatabaseTools.insertData(mDBName, singleResult);                firstSingleProfileResult = false;              }              else {                DatabaseTools.updateData(mDBName, singleResult);                if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {                  singleResult.dump(this);                }              }            }          }        }        else if (ep.getDataType().equalsIgnoreCase("time series")) {        }      }      catch (Exception ex) {        if (ex instanceof java.sql.SQLException) {          if (ex.getMessage().indexOf("Duplicate entry") >= 0) {            if (ep.getPath().indexOf("file:") < 0) {              this.logMessage("   " + ep.getPath() + " is a duplicate--ignored", true);            }            else {              this.logMessage("   " + ep.getPath() + "/" + ep.getFileName() + " is a duplicate--ignored.", true);            }          }        }        else {          if (NQueryConstants.DEFAULT_DEBUG_MODE) {            this.logMessage("Exception occurred reading file--see console", true);            ex.printStackTrace();          }        }      }    }    return true;  }  public Vector ingestProfile(Dbase db) throws Exception {    // get the longitude convention first get the longitude axis    Axis lnAxis = db.getAxis("lon");    int lonMutiplier = 1;    int epicCode = lnAxis.getIntegerAttributeValue("epic_code");    if (epicCode == 501) { // epic code for west longitude convention      // convert to NQuery's internal East longitude convention      lonMutiplier = -1;    }    else if (epicCode == 0) {      // probably not an EPIC file      // look for a units attribute      EPSAttribute att = lnAxis.getAttribute("units");      if (att != null && (att.getStringVal().equalsIgnoreCase("degrees_W") || att.getStringVal().equalsIgnoreCase("degrees_West"))) {        lonMutiplier = -1;      }    }    String dbKey = db.getEpicPtr().getPath();    if (dbKey.indexOf("file:") >= 0) {      // concatenate the filename into the URL      dbKey = dbKey + "/" + db.getEpicPtr().getFileName();    }    double lat = db.getEpicPtr().getLat();    double bottom = db.getEpicPtr().getBottomDepth();    // hydroattributes for the ith db    HydroAttributes hyd = db.getHydroAttributes();    if (NQueryConstants.DEFAULT_DEBUG_MODE) {      System.out.println("hyd = " + hyd.toString());    }    // get the section name    String sectionDescrip = hyd.getCruise().trim();    if (NQueryConstants.DEFAULT_DEBUG_MODE) {      System.out.println("sectionDescrip = " + sectionDescrip);    }    if (db.getDataType().indexOf("WOCE") >= 0 && sectionDescrip.indexOf("na") >= 0) {      // try to get a section name from the WOCE convention attributes      EPSAttribute att = db.getAttribute("WOCE_ID");      if (att != null) {        sectionDescrip = att.getStringVal();      }    }    if (sectionDescrip.length() > 0) {      inNamedSection = true;      inUnnamedSection = false;    }    else if (sectionDescrip.length() == 0 && !inUnnamedSection) {      inNamedSection = false;      inUnnamedSection = true;      mUnknownSectionCtr++;    }    if (inUnnamedSection) {      sectionDescrip = "Unknown" + mUnknownSectionCtr;    }    // Measured variables plus the index variable    int numVars = db.getNumMeasuredVariables(false);    ArrayList<EPSVariable> vars = new ArrayList<EPSVariable>();    Vector<EPSVariable> tvars = db.getMeasuredVariables(false);    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {      System.out.println("num Measured Vars = " + numVars);    }    // see whether pressure is a measured variable    // get the index property--the Z axis    Axis depAxis = db.getAxis("depth");    if (depAxis == null) {      depAxis = db.getAxis("pres");    }    if (depAxis == null) {      depAxis = db.getAxis("pressure");    }    if (depAxis == null) {      depAxis = db.getAxis("p");    }    if (depAxis == null) {      depAxis = db.getAxis("dep");    }    if (depAxis == null) {      depAxis = db.getAxis("deph");    }    if (depAxis == null) {      depAxis = db.getAxis("ctdprs");    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {      System.out.println("depAxis = " + depAxis);    }    // get number of "bottles"    int numBottles = depAxis.getLen();    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {      System.out.println("numBottles = " + numBottles);    }    // get the values of the depth axis    double[] pres = null;    MultiArray dama = depAxis.getData();    try {      pres = EPS_Util.get1DDoubleArray(dama, EPS_Util.getMeasuredDim(dama));    }    catch (Exception ex) {      if (NQueryConstants.DEFAULT_DEBUG_MODE) {        this.logMessage("An internal error occurred getting the measured values of " + depAxis.getName(), true);      }      throw (ex);    }    // get the depth axis units    String depAxisUnits = depAxis.getUnits();    depAxisUnits = depAxisUnits.toUpperCase().trim();    // convert units if necessary    if (NQueryConstants.DEFAULT_CONVERT_DEPTH) {      NQueryFormulas.convertDepthAxis(depAxisUnits, pres);    }    // now collect up only the measured variables--including the depth axis (if it's measured)    boolean hasPresVar = false;    for (int p = 0; p < tvars.size(); p++) {      Object obj = tvars.elementAt(p);      EPSVariable epv = (EPSVariable)obj;      // skip qc variables      if (epv.getOname().toUpperCase().indexOf("QC") > 0 || epv.getOname().toUpperCase().indexOf("FLAG") > 0) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {          System.out.println("Skipping = " + epv.getOname());        }        continue;      }      hasPresVar = epv.isPressure();      // remove variables that are not on the pres axis      Axis zAxis = epv.getZ();      String lcname = epv.getName().toLowerCase();      if (zAxis.getName().equalsIgnoreCase(depAxis.getName())) {        vars.add(tvars.elementAt(p));      }    }    if (!hasPresVar && depAxis != null) {      if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {        System.out.println("Does not have pressure variable,  = " + depAxis);      }      // first make a real pressure variable from the z axis      MultiArray tMa = depAxis.getData();      double[] pressures = EPS_Util.get1DDoubleArray(tMa, EPS_Util.getMeasuredDim(tMa));      EPSVariable pressVar = new EPSVariable();      pressVar.setOname(depAxis.getName());      pressVar.setSname(depAxis.getName());      pressVar.setLname(depAxis.getName());      pressVar.setGname(depAxis.getName());      pressVar.setDtype(EPSConstants.EPDOUBLE);      pressVar.setVclass(Double.TYPE);      pressVar.setUnits(depAxis.getUnits());      EPSVariable refVar = (EPSVariable)vars.get(0);      Axis tAxis = refVar.getT();      Axis zAxis = depAxis;      Axis yAxis = refVar.getY();      Axis xAxis = refVar.getX();      if (tAxis != null && zAxis != null && yAxis != null && xAxis != null) {        boolean[] dimUsed = {true, true, true, true};        pressVar.setDimorder(0, 0);        pressVar.setDimorder(1, 1);        pressVar.setDimorder(2, 2);        pressVar.setDimorder(3, 3);        pressVar.setT(tAxis);        pressVar.setZ(zAxis);        pressVar.setY(yAxis);        pressVar.setX(xAxis);        // set the data        float[][][][] presaa = new float[1][pressures.length][1][1];        for (int b = 0; b < pressures.length; b++) {          presaa[0][b][0][0] = (float)pres[b];          if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {            System.out.println("Added pressure value,  = " + pres[b]);          }        }        MultiArray presma = new ArrayMultiArray(presaa);        try {          pressVar.setData(presma);        }        catch (Exception ex) {          throw ex;        }        vars.add(pressVar);      }    }    // vars is a list of the variables from the actual netcdf file    // need to pass the profile's lexicon to these canonical routines    int dbLexicon = NQueryConstants.LEXICON.getLexicon(db);    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      System.out.println("dbLexicon = " + dbLexicon);      System.out.println("db.getDataType = " + db.getDataType());    }    // need arrays for the standard variables s, t, o2, no3, po4    // salt can be either bottle or CTD salt    double[] salt = null;    EPSVariable saltepv = NQueryConstants.LEXICON.getCanonicalSalinity(dbLexicon, vars,        (NQueryConstants.DEFAULT_SALINITY_VARIABLE == NQueryConstants.BOTTLE_SALINITY), true);    if (saltepv != null) {      MultiArray vma = saltepv.getData();      try {        salt = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE) {          this.logMessage("An internal error occurred getting the measured values of " + saltepv.getOname(), true);        }        throw (ex);      }    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      if (salt != null) {        System.out.println("# of salts = " + salt.length);        for (int i = 0; i < 5; i++) {          System.out.println("salts " + " " + i + " " + salt[i]);        }      }      else {        System.out.println("cannonical salt is null");      }    }    double[] temp = null;    EPSVariable tempepv = NQueryConstants.LEXICON.getCanonicalTemperature(dbLexicon, vars, true);    if (tempepv != null) {      MultiArray vma = tempepv.getData();      try {        temp = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE) {          this.logMessage("An internal error occurred getting the measured values of " + tempepv.getOname(), true);        }        throw (ex);      }    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      if (temp != null) {        System.out.println("# of temps = " + temp.length);        for (int i = 0; i < 5; i++) {          System.out.println("temp " + " " + i + " " + temp[i]);        }      }      else {        System.out.println("canonical temp is null");      }    }    double[] o2 = null;    EPSVariable o2epv = NQueryConstants.LEXICON.getCanonicalOxygen(dbLexicon, vars,        (NQueryConstants.DEFAULT_O2_VARIABLE == NQueryConstants.BOTTLE_O2), true);    if (o2epv != null) {      MultiArray vma = o2epv.getData();      try {        o2 = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          this.logMessage("An internal error occurred getting the measured values of " + o2epv.getOname(), true);        }        throw (ex);      }    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      if (o2 != null) {        System.out.println("# of o2s = " + o2.length);        for (int i = 0; i < 5; i++) {          System.out.println("o2 " + " " + i + " " + o2[i]);        }      }      else {        System.out.println("canonical o2 is null");      }    }    double[] no3 = null;    EPSVariable no3epv = NQueryConstants.LEXICON.getCanonicalNitrate(dbLexicon, vars, true);    if (no3epv != null) {      MultiArray vma = no3epv.getData();      try {        no3 = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          this.logMessage("An internal error occurred getting the measured values of " + no3epv.getOname(), true);        }        throw (ex);      }    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      if (no3 != null) {        System.out.println("# of no3s = " + no3.length);      }      else {        System.out.println("canonical no3 is null");      }    }    double[] po4 = null;    EPSVariable po4epv = NQueryConstants.LEXICON.getCanonicalPhosphate(dbLexicon, vars, true);    if (po4epv != null) {      MultiArray vma = po4epv.getData();      try {        po4 = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          this.logMessage("An internal error occurred getting the measured values of " + po4epv.getOname(), true);        }        throw (ex);      }    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      if (po4 != null) {        System.out.println("# of po4s = " + po4.length);      }      else {        System.out.println("canonical po4 is null");      }    }    // need array for substitutions if they exist    double[] substituteSalt = null;    boolean isBottlePrimary = NQueryConstants.DEFAULT_SALINITY_VARIABLE == NQueryConstants.BOTTLE_SALINITY;    EPSVariable subsaltepv = NQueryConstants.LEXICON.getCanonicalSalinity(dbLexicon, vars, !isBottlePrimary, true);    if (subsaltepv != null) {      MultiArray vma = subsaltepv.getData();      try {        substituteSalt = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          this.logMessage("An internal error occurred getting the measured values of " + subsaltepv.getOname(), true);        }        throw (ex);      }    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      if (substituteSalt != null) {        System.out.println("# of substituteSalts = " + substituteSalt.length);      }      else {        System.out.println("substituteSalt is null");      }    }    double[] substituteO2 = null;    isBottlePrimary = NQueryConstants.DEFAULT_O2_VARIABLE == NQueryConstants.BOTTLE_O2;    EPSVariable subo2epv = NQueryConstants.LEXICON.getCanonicalOxygen(dbLexicon, vars, !isBottlePrimary, true);    if (subo2epv != null) {      MultiArray vma = subo2epv.getData();      try {        substituteO2 = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));      }      catch (Exception ex) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          this.logMessage("An internal error occurred getting the measured values of " + subo2epv.getOname(), true);        }        throw (ex);      }    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      if (substituteO2 != null) {        System.out.println("# substituteO2 = " + substituteO2.length);      }      else {        System.out.println("substituteO2 is null");      }    }    // TODO: determine whether T_20 should be a substitute for the canonical temperature    // calculate the built-in calculations on the observed variables    // present in the file    Vector allResults = new Vector();    for (int p = 0; p < vars.size(); p++) {      EPSVariable epv = (EPSVariable)vars.get(p);      // skip qc variables      if (epv.getOname().toUpperCase().indexOf("QC") > 0 || epv.getOname().toUpperCase().indexOf("FLAG") > 0) {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {          System.out.println("Skipping #2 " + epv.getOname());        }        continue;      }      // is this a variable selected in the UI? The UI variables are displayed in a particular lexicon      // but are stored in a native lexicon. The chance of a match is to match the native lexicon as reported in the      // pointer file with the derived lexicon from the actual variable in the file      // translate the native variable name to the display lexicon      String dbVarName = epv.getOname();      epicCode = -99;      if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {        System.out.println("dbVarName = " + dbVarName);        System.out.println("dbLexicon = " + dbLexicon);        System.out.println("NQueryConstants.DEFAULT_LEXICON = " + NQueryConstants.DEFAULT_LEXICON);      }      // isolate variables that have embedded epic codes      if (dbVarName.indexOf("_") > 0) {        try {          epicCode = Integer.valueOf(dbVarName.substring(dbVarName.lastIndexOf("_") + 1, dbVarName.length())).intValue();          if (epicCode > 4200 && epicCode <= 4300) {            // hack for IPRC dapper server            dbLexicon = NQueryConstants.LEXICON.WOCE_LEXICON;          }          else {            dbLexicon = NQueryConstants.LEXICON.EPIC_LEXICON;          }          dbVarName = dbVarName.substring(0, dbVarName.lastIndexOf("_"));          if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {            System.out.println("isolated dbVarName = " + dbVarName);          }        }        catch (Exception ex) {          // eat exception...no epic code on this variable name--just a variable with an underscore in it        }      }      if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {        System.out.println("DEFAULT_TRANSLATE_LEXICON = " + NQueryConstants.DEFAULT_TRANSLATE_LEXICON);      }      String translatedName = dbVarName;      /* if (dbLexicon >= 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {         if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {           System.out.println("Attempt to translate " + dbVarName + " from lex = " + dbLexicon + " to lex = " +                              NQueryConstants.DEFAULT_LEXICON + " with ec = " + epicCode);         }         translatedName = NQueryConstants.LEXICON.translate(dbLexicon, NQueryConstants.DEFAULT_LEXICON, dbVarName, epicCode);         if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {           System.out.println("translation result = " + translatedName);         }       }       else if (dbLexicon < 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {         // attempt to translate variables of an unknown lexicon to the destination lexicon         if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {           System.out.println("Attempt to translate " + translatedName + " from unknown lex " + " to lex = " +                              NQueryConstants.DEFAULT_LEXICON + " with ec = " + epicCode);         }         translatedName = NQueryConstants.LEXICON.translate(NQueryConstants.DEFAULT_LEXICON, translatedName, epicCode);         if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {           System.out.println("translation result = " + translatedName);         }       }       if (translatedName == null) {         if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {           this.logMessage("No translation found for " + dbVarName, true);           System.out.println("No translation found for " + dbVarName);         }         continue;       }       if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {         System.out.println("translatedName = " + translatedName);       }*/      translatedName = translatedName.trim();      if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {        System.out.println("trimmed translatedName = " + translatedName);      }      boolean match = false;      Iterator itor = mParent.getProfileVariables().iterator();      while (itor.hasNext()) {        VariableNode var = (VariableNode)itor.next();        if (!var.isSelected()) {          continue;        }        String name = var.getName().trim();        //this name is in the JOA lexicon--translate to the destination lexicon        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          System.out.println(name + " compared to " + translatedName);        }        if (name.equalsIgnoreCase(translatedName)) {          match = true;          if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG2) {            System.out.println(name + " matched " + translatedName);          }          break;        }        /*else {          String joaName = Lexicon.paramNameToJOAName(name);          if (joaName != null) {            if (joaName.equalsIgnoreCase(translatedName)) {              match = true;              if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {                System.out.println(joaName + " matched " + translatedName);              }              break;            }          }                 }*/      }      if (match) {        // get the measured values of the variable        MultiArray vma = epv.getData();        double[] varray = null;        try {          varray = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));        }        catch (Exception ex) {          if (NQueryConstants.DEFAULT_DEBUG_MODE) {            this.logMessage("An internal error occurred getting the measured values of " + epv.getOname(), true);          }          throw (ex);        }        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          System.out.println("data length = " + varray.length);        }        // perform the built-in calculations        translatedName = translatedName.trim().replace('+', 'p');        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          System.out.println("calculating************" + translatedName);        }        ProfileResults result = calculateProfile(dbKey, translatedName, pres, varray);        allResults.add(result);      }      else {        if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {          System.out.println(dbVarName + " ignored************");        }      }    }    // Process the user-defined profile calculations:    Iterator vitor = mParent.getProfileVariables().iterator();    double[] ccvarray = new double[numBottles];    while (vitor.hasNext()) {      VariableNode var = (VariableNode)vitor.next();      if (var instanceof CalculatedVariableNode && var.isSelected()) {        CalculatedVariable calcVar = ((CalculatedVariableNode)var).getCalcVar();        NQueryCalculation calc = (NQueryCalculation)calcVar.getUserObject();        String calcName = calc.getCalcType();        if (calc.getArg() != null) {          // calc has an argument          try {            if (calc.getCanonicalName().indexOf("SIG") >= 0) {              double theRefPress = calc.getArgAsDouble();              for (int b = 0; b < numBottles; b++) {                double t = temp[b];                double s = salt[b];                double p = pres[b];                if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || p == NQueryConstants.MISSINGVALUE) {                  //TODO: missing value substitutions                  ccvarray[b] = NQueryConstants.MISSINGVALUE;                  continue;                }                double sig = NQueryFormulas.sigma(s, NQueryFormulas.theta(s, t, p, theRefPress), theRefPress);                ccvarray[b] = sig;              }              ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);              allResults.add(result);            }            else if (calc.getCanonicalName().indexOf("THTA") >= 0) {              double theRefPress = calc.getArgAsDouble();              for (int b = 0; b < numBottles; b++) {                double t = temp[b];                double s = salt[b];                double p = pres[b];                if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || p == NQueryConstants.MISSINGVALUE) {                  //TODO: missing value substitutions                  ccvarray[b] = NQueryConstants.MISSINGVALUE;                  continue;                }                double thta = NQueryFormulas.theta(s, t, p, theRefPress);                ccvarray[b] = thta;              }              ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);              allResults.add(result);            }            else if (calc.getCanonicalName().indexOf("SIGWCUSTRP") >= 0) {              double theRefPress = calc.getArgAsDouble();              for (int b = 0; b < numBottles; b++) {                double t = temp[b];                double s = salt[b];                double p = pres[b];                if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || p == NQueryConstants.MISSINGVALUE) {                  //TODO: missing value substitutions                  ccvarray[b] = NQueryConstants.MISSINGVALUE;                  continue;                }                double sig = NQueryFormulas.sigma(s, NQueryFormulas.theta(s, t, p, theRefPress), theRefPress);                ccvarray[b] = sig;              }              ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);              allResults.add(result);            }            else if (calc.getCanonicalName().indexOf("AOU") >= 0 && o2 != null) {              boolean vol2Mass = calc.getArgAsBoolean();              for (int b = 0; b < numBottles; b++) {                double t = temp[b];                double s = salt[b];                double o = o2[b];                if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || o == NQueryConstants.MISSINGVALUE) {                  //TODO: missing value substitutions                  ccvarray[b] = NQueryConstants.MISSINGVALUE;                  continue;                }                double aou = NQueryFormulas.computeAOU(t, s, o, vol2Mass);                ccvarray[b] = aou;              }              ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);              allResults.add(result);            }            else if (calc.getCanonicalName().indexOf("NO") >= 0 && o2 != null && no3 != null) {              boolean vol2Mass = calc.getArgAsBoolean();              for (int b = 0; b < numBottles; b++) {                double n = no3[b];                double o = o2[b];                if (n == NQueryConstants.MISSINGVALUE || o == NQueryConstants.MISSINGVALUE) {                  //TODO: missing value substitutions                  ccvarray[b] = NQueryConstants.MISSINGVALUE;                  continue;                }                double no = NQueryFormulas.computeNO(n, o, vol2Mass);                ccvarray[b] = no;              }              ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);              allResults.add(result);            }            else if (calc.getCanonicalName().indexOf("PO") >= 0 && o2 != null && po4 != null) {              boolean vol2Mass = calc.getArgAsBoolean();              for (int b = 0; b < numBottles; b++) {                double phos = po4[b];                double o = o2[b];                if (phos == NQueryConstants.MISSINGVALUE || o == NQueryConstants.MISSINGVALUE) {                  //TODO: missing value substitutions                  ccvarray[b] = NQueryConstants.MISSINGVALUE;                  continue;                }                double po = NQueryFormulas.computePO(phos, o, vol2Mass);                ccvarray[b] = po;              }              ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);              allResults.add(result);            }            else if (calc.getCanonicalName().startsWith("BV") && calc.isBuoyanceFrequency()) {              double zLength = calc.getArgAsDouble();              double[] bvResults = NQueryFormulas.BouyancyFrequency(pres, temp, salt, lat, zLength, false, false);              ProfileResults result = calculateProfile(dbKey, calcName, pres, bvResults);              allResults.add(result);            }            else if (calc.getCanonicalName().startsWith("SB") && calc.isBuoyanceFrequency()) {              double zLength = calc.getArgAsDouble();              double[] bvResults = NQueryFormulas.BouyancyFrequency(pres, temp, salt, lat, zLength, true, false);              ProfileResults result = calculateProfile(dbKey, calcName, pres, bvResults);              allResults.add(result);            }            else if (calc.getCanonicalName().startsWith("VT") && calc.isBuoyanceFrequency()) {              double zLength = calc.getArgAsDouble();              double[] bvResults = NQueryFormulas.BouyancyFrequency(pres, temp, salt, lat, zLength, false, true);              ProfileResults result = calculateProfile(dbKey, calcName, pres, bvResults);              allResults.add(result);            }            else if (calc.getCanonicalName().startsWith("ML")) {              NQMixedLayerCalcSpec spec = calc.getArgAsMixedLayerCalcSpec();              ExportVariable mldVar = spec.getParam();              double[] mldArray = null;              // match this up with a variable in the netCDF file              for (int p = 0; p < vars.size(); p++) {                EPSVariable epv = (EPSVariable)vars.get(p);                // skip qc variables                if (epv.getOname().toUpperCase().indexOf("QC") > 0 || epv.getOname().toUpperCase().indexOf("FLAG") > 0) {                  continue;                }                // translate the native variable name to the display lexicon                // variable names in the specification are always in the display lexicon                String dbVarName = epv.getOname();                String translatedName = dbVarName;                /*if (dbLexicon >= 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {                  translatedName = NQueryConstants.LEXICON.translate(dbLexicon, NQueryConstants.DEFAULT_LEXICON, dbVarName,                      -99);                }                else if (dbLexicon < 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {                  // attempt to translate variables of an unknown lexicon to the destination lexicon                  translatedName = NQueryConstants.LEXICON.translate(NQueryConstants.DEFAULT_LEXICON, translatedName);                }*/                translatedName = translatedName.trim();                if (mldVar.getPresentationVarName().equalsIgnoreCase(translatedName)) {                  // get the measured values of the variable                  MultiArray vma = epv.getData();                  try {                    mldArray = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));                  }                  catch (Exception ex) {                    if (NQueryConstants.DEFAULT_DEBUG_MODE) {                      this.logMessage("An internal error occurred getting the measured values of " + epv.getOname(), true);                    }                  }                }              }              double result = NQueryConstants.MISSINGVALUE;              if (mldArray != null && spec.getMethod() == NQueryConstants.MIXED_LAYER_DIFFERENCE) {                result = NQueryFormulas.mixedLayerDifference(pres, mldArray, spec.getDepth(), spec.getTolerance());              }              else if (mldArray != null && spec.getMethod() == NQueryConstants.MIXED_LAYER_SLOPE) {                result = NQueryFormulas.mixedLayerSlope(pres, mldArray, spec.getDepth(), spec.getTolerance());              }              else if (mldArray != null && spec.getMethod() == NQueryConstants.MIXED_LAYER_SURFACE) {                result = NQueryFormulas.mixedLayerSurface(pres, mldArray, spec.getStartDepth(), spec.getDepth(),                    spec.getTolerance());              }              if (mldArray != null) {                allResults.add(new SingleProfileResult(dbKey, calc.getCalcType(), result));              }            }            else if (calc.getCanonicalName().startsWith("INTEG")) {              NQIntegrationSpecification spec = calc.getArgAsIntegrationSpecification();              // calculate an integration from the profile array              // need arrays for the input variable              ExportVariable intVar = spec.getIntVar();              ExportVariable wrtVar = spec.getWRTVar();              double[] intArray = null;              double[] wrtArray = null;              for (int p = 0; p < vars.size(); p++) {                EPSVariable epv = (EPSVariable)vars.get(p);                // skip qc variables                if (epv.getOname().toUpperCase().indexOf("QC") > 0 || epv.getOname().toUpperCase().indexOf("FLAG") > 0) {                  continue;                }                // translate the native variable name to the display lexicon                // variable names in the specification are always in the display lexicon                String dbVarName = epv.getOname();                String translatedName = dbVarName;               /* if (dbLexicon >= 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {                  translatedName = NQueryConstants.LEXICON.translate(dbLexicon, NQueryConstants.DEFAULT_LEXICON, dbVarName,                      -99);                }                else if (dbLexicon < 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {                  // attempt to translate variables of an unknown lexicon to the destination lexicon                  translatedName = NQueryConstants.LEXICON.translate(NQueryConstants.DEFAULT_LEXICON, translatedName);                }*/                translatedName = translatedName.trim();                if (intVar.getPresentationVarName().equalsIgnoreCase(translatedName)) {                  // get the measured values of the variable                  MultiArray vma = epv.getData();                  try {                    intArray = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));                  }                  catch (Exception ex) {                    if (NQueryConstants.DEFAULT_DEBUG_MODE) {                      this.logMessage("An internal error occurred getting the measured values of " + epv.getOname(), true);                    }                  }                }                if (wrtVar.getPresentationVarName().equalsIgnoreCase(translatedName)) {                  // get the measured values of the variable                  MultiArray vma = epv.getData();                  try {                    wrtArray = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));                  }                  catch (Exception ex) {                    if (NQueryConstants.DEFAULT_DEBUG_MODE) {                      this.logMessage("An internal error occurred getting the measured values of " + epv.getOname(), true);                    }                  }                }              }              double result = NQueryConstants.MISSINGVALUE;              if (intArray != null && wrtArray != null) {                result = NQueryFormulas.integrateStation(spec, pres, intArray, wrtArray, lat);                allResults.add(new SingleProfileResult(dbKey, calc.getCalcType(), result));              }            }            else if (calc.getCanonicalName().startsWith("INTERP")) {              NQInterpolationSpecification spec = calc.getArgAsInterpolationSpecification();              // calculate an interpolation from the profile array              // need arrays for the input variable              ExportVariable intVar = spec.getIntVar();              ExportVariable wrtVar = spec.getWRTVar();              double[] intArray = null;              double[] wrtArray = null;              for (int p = 0; p < vars.size(); p++) {                EPSVariable epv = (EPSVariable)vars.get(p);                // skip qc variables                if (epv.getOname().toUpperCase().indexOf("QC") > 0 || epv.getOname().toUpperCase().indexOf("FLAG") > 0) {                  continue;                }                // translate the native variable name to the display lexicon                // variable names in the specification are always in the display lexicon                String dbVarName = epv.getOname();                String translatedName = dbVarName;               /* if (dbLexicon >= 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {                  translatedName = NQueryConstants.LEXICON.translate(dbLexicon, NQueryConstants.DEFAULT_LEXICON, dbVarName,                      -99);                }                else if (dbLexicon < 0 && NQueryConstants.DEFAULT_TRANSLATE_LEXICON) {                  // attempt to translate variables of an unknown lexicon to the destination lexicon                  translatedName = NQueryConstants.LEXICON.translate(NQueryConstants.DEFAULT_LEXICON, translatedName);                }*/                translatedName = translatedName.trim();                if (intVar.getPresentationVarName().equalsIgnoreCase(translatedName)) {                  // get the measured values of the variable                  MultiArray vma = epv.getData();                  try {                    intArray = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));                  }                  catch (Exception ex) {                    if (NQueryConstants.DEFAULT_DEBUG_MODE) {                      this.logMessage("An internal error occurred getting the measured values of " + epv.getOname(), true);                    }                  }                }                if (wrtVar.getPresentationVarName().equalsIgnoreCase(translatedName)) {                  // get the measured values of the variable                  MultiArray vma = epv.getData();                  try {                    wrtArray = EPS_Util.get1DDoubleArray(vma, EPS_Util.getMeasuredDim(vma));                  }                  catch (Exception ex) {                    if (NQueryConstants.DEFAULT_DEBUG_MODE) {                      this.logMessage("An internal error occurred getting the measured values of " + epv.getOname(), true);                    }                  }                }              }              double result = NQueryConstants.MISSINGVALUE;              if (intArray != null && wrtArray != null) {                result = NQueryFormulas.interpolateStation(spec, pres, intArray, wrtArray, lat, bottom);                allResults.add(new SingleProfileResult(dbKey, calc.getCalcType(), result));              }            }          }          catch (ClassCastException cce) {            if (NQueryConstants.DEFAULT_DEBUG_MODE) {              this.logMessage("Don't know how to calculate " + calc.getCalcType(), true);            }          }        } // end calc.getArg != null        else {          if (calc.getCanonicalName().indexOf("SPCY") >= 0) {            for (int b = 0; b < numBottles; b++) {              double t = temp[b];              double s = salt[b];              double p = pres[b];              if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || p == NQueryConstants.MISSINGVALUE) {                //TODO: missing value substitutions                ccvarray[b] = NQueryConstants.MISSINGVALUE;                continue;              }              double th = NQueryFormulas.theta(s, t, p, 0);              double spcy = NQueryFormulas.computeSpiciness(th, s);              ccvarray[b] = spcy;            }            ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("SVAN") >= 0) {            for (int b = 0; b < numBottles; b++) {              double t = temp[b];              double s = salt[b];              double p = pres[b];              if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || p == NQueryConstants.MISSINGVALUE) {                //TODO: missing value substitutions                ccvarray[b] = NQueryConstants.MISSINGVALUE;                continue;              }              double svan = NQueryFormulas.specificVolumeAnomoly(s, NQueryFormulas.theta(s, t, p, 0.0), p);              ccvarray[b] = svan;            }            ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("SVEL") >= 0) {            for (int b = 0; b < numBottles; b++) {              double t = temp[b];              double s = salt[b];              double p = pres[b];              if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || p == NQueryConstants.MISSINGVALUE) {                //TODO: missing value substitutions                ccvarray[b] = NQueryConstants.MISSINGVALUE;                continue;              }              double svel = NQueryFormulas.soundVelocity(p, t, s);              ccvarray[b] = svel;            }            ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("O2pct") >= 0 && o2 != null) {            for (int b = 0; b < numBottles; b++) {              double t = temp[b];              double s = salt[b];              double o = o2[b];              if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || o == NQueryConstants.MISSINGVALUE) {                //TODO: missing value substitutions                ccvarray[b] = NQueryConstants.MISSINGVALUE;                continue;              }              ccvarray[b] = o / NQueryFormulas.o2Saturation(t, s) * 100.0;            }            ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("HTST") >= 0) {            for (int b = 0; b < numBottles; b++) {              double t = temp[b];              double s = salt[b];              double p = pres[b];              if (s == NQueryConstants.MISSINGVALUE || t == NQueryConstants.MISSINGVALUE || p == NQueryConstants.MISSINGVALUE) {                //TODO: missing value substitutions                ccvarray[b] = NQueryConstants.MISSINGVALUE;                continue;              }              double thta = NQueryFormulas.theta(s, t, p, 0);              double d = 1e-6 * (1000 + NQueryFormulas.sigma(s, thta, 0)) * thta * NQueryFormulas.heatCapacity(s, thta);              ccvarray[b] = d;            }            ProfileResults result = calculateProfile(dbKey, calcName, pres, ccvarray);            allResults.add(result);          }          if (calc.getCanonicalName().indexOf("ALPH") >= 0) {            double[] alphResults = NQueryFormulas.alpha(pres, temp, salt);            ProfileResults result = calculateProfile(dbKey, calcName, pres, alphResults);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("BETA") >= 0) {            double[] betaResults = NQueryFormulas.beta(pres, temp, salt);            ProfileResults result = calculateProfile(dbKey, calcName, pres, betaResults);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("ADRV") >= 0) {            double[] alphaderivResults = NQueryFormulas.alphadTdZ(pres, temp, salt);            ProfileResults result = calculateProfile(dbKey, calcName, pres, alphaderivResults);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("BDRV") >= 0) {            double[] betaderivResults = NQueryFormulas.betadSdZ(pres, temp, salt);            ProfileResults result = calculateProfile(dbKey, calcName, pres, betaderivResults);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("GPOT") >= 0) {            double[] gpotResults = NQueryFormulas.geopotentialAnomaly(pres, temp, salt, lat);            ProfileResults result = calculateProfile(dbKey, calcName, pres, gpotResults);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("PE") >= 0) {            double[] peResults = NQueryFormulas.potentialEnergyAnomaly(pres, temp, salt, lat);            ProfileResults result = calculateProfile(dbKey, calcName, pres, peResults);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("HEAT") >= 0) {            double[] heatResults = NQueryFormulas.heatStorage(pres, temp, salt, lat);            ProfileResults result = calculateProfile(dbKey, calcName, pres, heatResults);            allResults.add(result);          }          else if (calc.getCanonicalName().indexOf("ACTT") >= 0) {            double[] acttResults = NQueryFormulas.acousticTravelTime(pres, temp, salt, lat);            ProfileResults result = calculateProfile(dbKey, calcName, pres, acttResults);            allResults.add(result);          }        } // end else calc has no argument      } // endif var is calculated    }    if (NQueryConstants.DEFAULT_DEBUG_MODE || DEBUG) {      for (int i = 0; i < allResults.size(); i++) {        if (allResults.elementAt(i) instanceof ProfileResults) {          ProfileResults res = (ProfileResults)allResults.elementAt(i);          res.dump(this);        }        else if (allResults.elementAt(i) instanceof SingleProfileResult) {          SingleProfileResult res = (SingleProfileResult)allResults.elementAt(i);          res.dump(this);        }      }    }    return allResults;  }  public ProfileResults calculateProfile(String dbKey, String var, double[] pres, double[] varray) {    // perform the built-in calculations    ProfileResults results = new ProfileResults();    String translatedName = new String(var);    double result;    String varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_AVERAGE) {      result = NQueryFormulas.calcMean(varray);      // create the variable name      varName += "_mean";      results.addResult(NQueryConstants.CALC_AVERAGE, dbKey, varName, result);    }    varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_N) {      result = NQueryFormulas.calcN(varray);      // create the variable name      varName += "_n";      results.addResult(NQueryConstants.CALC_N, dbKey, varName, result);    }    varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_MAX) {      result = NQueryFormulas.calcMax(varray);      // create the variable name      varName += "_max";      results.addResult(NQueryConstants.CALC_MAX, dbKey, varName, result);    }    varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_MIN) {      result = NQueryFormulas.calcMin(varray);      // create the variable name      varName += "_min";      results.addResult(NQueryConstants.CALC_MIN, dbKey, varName, result);    }    varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_DEPTH_OF_MAX) {      result = NQueryFormulas.calcDepthOfMax(pres, varray);      // create the variable name      varName += "_depth_of_max";      results.addResult(NQueryConstants.CALC_DEPTH_OF_MAX, dbKey, varName, result);    }    varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_DEPTH_OF_MIN) {      result = NQueryFormulas.calcDepthOfMin(pres, varray);      // create the variable name      varName += "_depth_of_min";      results.addResult(NQueryConstants.CALC_DEPTH_OF_MIN, dbKey, varName, result);    }    varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_MIN_DEPTH_OF_NONMISSING) {      result = NQueryFormulas.calcMinDepthOfNonMissingValue(pres, varray);      // create the variable name      varName += "_min_depth_of_nonmissing";      results.addResult(NQueryConstants.MIN_DEPTH_OF_NONMISSING, dbKey, varName, result);    }    varName = translatedName;    if (NQueryConstants.DEFAULT_CALC_MAX_DEPTH_OF_NONMISSING) {      result = NQueryFormulas.calcMaxDepthOfNonMissingValue(pres, varray);      // create the variable name      varName += "_max_depth_of_nonmissing";      results.addResult(NQueryConstants.MAX_DEPTH_OF_NONMISSING, dbKey, varName, result);    }    return results;  }  public void clearMsgLog() {    mLogMessages.setText("");  }  public void logMessage(String message, boolean addNewLine) {    mLogMessages.append(message);    if (addNewLine) {      mLogMessages.append("\n");    }    mLogMessages.setCaretPosition(mLogMessages.getText().length());  }  public void setClausePreview() {    mPreviewPanel.setContents("select item_id,data_type, fileset,id,longitude,latitude,zmin,zmax,zunits,date,variables,units,lexicon from item HAVING item_id in (SELECT item_id FROM data WHERE " +                              getClauseString(false) + ")");  }  public String getClauseString(boolean shortenParamNames) {    String logicalOP = " and ";    if (mLogicCB.getSelectedIndex() == 0) {      logicalOP = " or ";    }    else {      logicalOP = " and ";    }    // get the clauses    String[] clauses = mCriteriaCont.getClauses(shortenParamNames);    String finalStr = "";    for (int i = 0; i < clauses.length; i++) {      if (i > 0 && i < clauses.length && clauses[i].length() > 0) {	finalStr += logicalOP;      }      finalStr += clauses[i];    }    return finalStr;  }  public String getWhereString() {    return mPreviewPanel.getContents();  }  public void saveDB() {    // save database settings as XML    try {      // read the DTD file      // create a document object      Document doc = (Document)Class.forName("com.ibm.xml.parser.TXDocument").newInstance();      // make databasedocument the root element      Element root = doc.createElement("databasedocument");      // database prefs      Element item = doc.createElement("dbname");      item.appendChild(doc.createTextNode(mDBName));      root.appendChild(item);      item = doc.createElement("comments");      item.appendChild(doc.createTextNode(mDBComment));      root.appendChild(item);      item = doc.createElement("serveruri");      item.appendChild(doc.createTextNode(mDBURI));      root.appendChild(item);      item = doc.createElement("serverport");      item.appendChild(doc.createTextNode(mDBPort));      root.appendChild(item);      item = doc.createElement("username");      item.appendChild(doc.createTextNode(mDBUser));      root.appendChild(item);      doc.appendChild(root);      ((TXDocument)doc).setVersion("1.0");      ((TXDocument)doc).printWithFormat(new FileWriter(mFile));    }    catch (Exception ex) {      ex.printStackTrace();    }  }  private class MyScroller extends JScrollPane {    public MyScroller(Component c) {      super(c);      this.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);    }    public Dimension getPreferredSize() {      return new Dimension(210, 150);    }  }  public boolean isCanCalcProfiles() {    return true;  }  public boolean isCanCalcTS() {    return true;  }  public void closeMe() {    PowerOceanAtlas.getInstance().removeWindowsMenuChangedListener((WindowsMenuChangedListener)this);    PowerOceanAtlas.getInstance().removeOpenFileViewer(this);    WindowsMenuChangedEvent pce = new WindowsMenuChangedEvent(PowerOceanAtlas.getInstance());    Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(pce);  }  public String getTitle() {    return super.getTitle();  }  public RubberbandPanel getPanel() {    return null;  }}