/* * $Id: WriteEpicPtrsAction.java,v 1.1 2005/09/07 18:43:19 oz Exp $ * */package javaoceanatlas.io;import java.awt.*;import java.io.*;import java.util.*;import java.awt.event.*;import javax.swing.*;import gov.noaa.pmel.eps2.*;import gov.noaa.pmel.util.*;import javaoceanatlas.ui.*;import javaoceanatlas.resources.*;import javaoceanatlas.utility.*;import javaoceanatlas.classicdatamodel.*;import com.apple.mrj.*;public class WriteEpicPtrsAction extends AbstractAction {  protected String mText;  protected FileViewer mFV;  protected String mTitle;  public WriteEpicPtrsAction(FileViewer fv, String text) {    super(text, null);    mFV = fv;    mText = text;  }  public String getText() {    return mText;  }  public void actionPerformed(ActionEvent e) {    // export a netcdf section    Frame fr = new Frame();    String directory = System.getProperty("user.dir");    FileDialog f = new FileDialog(fr, "Name of Pointer File:", FileDialog.SAVE);    f.setDirectory(directory);    String fileExtension = new String(".ptr");    f.setFile(mFV.getTitle() + fileExtension);    f.setVisible(true);    directory = f.getDirectory();    f.dispose();    if (directory != null && f.getFile() != null) {      File outFile = new File(directory, f.getFile());      String mCurrOutFileName = outFile.getName();      mFV.setCurrOutFile(outFile);      writeEPICPtrs(outFile);      try {        JOAConstants.LogFileStream.writeBytes("Exported EPIC ptr file: " + outFile.getCanonicalPath() + "\n");        JOAConstants.LogFileStream.flush();      }      catch (Exception ex) {}    }  }  public boolean isEnabled() {    return true;  }  public void writeEPICPtrs(File outFile) {    ProgressDialog progress = new ProgressDialog(mFV, "Writing EPIC Pointers...", Color.blue, Color.white);    progress.setVisible(true);    // outfile is the pointer file    String dir = outFile.getParent();    String ptrFileName = outFile.getName();    //instantiate a pointer file object    EpicPtrs ptrDB = null;    ArrayList filePtrs = new ArrayList();    // set the writer class for the pointer file    String lcName = ptrFileName.toLowerCase();    if (lcName.indexOf(".xml") > 0) {      ptrDB = new EpicPtrs(outFile, true);      ptrDB.setWriter(new XMLPtrFileWriter(outFile));    }    else {      ptrDB = new EpicPtrs(outFile);      ptrDB.setWriter(new EpicPtrFileWriter(outFile));    }    // loop on the casts: stations become individual files    int s = 0;    int totalStnsToWrite = JOAFormulas.getNumberVisStns(mFV);    for (int fc = 0; fc < mFV.mNumOpenFiles; fc++) {      OpenDataFile of = (OpenDataFile)mFV.mOpenFiles.elementAt(fc);      for (int sec = 0; sec < of.mNumSections; sec++) {        Section sech = (Section)of.getSection(sec);        if (sech.mNumCasts == 0) {          continue;        }        for (int stc = 0; stc < sech.mStations.size(); stc++) {          Station sh = (Station)sech.mStations.elementAt(stc);          if (!sh.mUseStn || sh.getOriginalPath() == null) {            continue;          }          progress.setPercentComplete(100.0 * ((double)s / (double)totalStnsToWrite));          int hour = 0;          if (sh.mHour != JOAConstants.MISSINGVALUE) {            hour = sh.mHour;          }          double mins = 0;          if (sh.mMinute != JOAConstants.MISSINGVALUE) {            mins = sh.mMinute;          }          // make the time axis units          int min = (int)mins;          double fmin = mins - min;          int secs = (int)(fmin * 60.0);          double fsec = (fmin * 60.0) - secs;          int msec = (int)(fsec * 1000.0);          // z axis          int xPos = sech.getPRESVarPos();          double[] za = new double[sh.mNumBottles];          for (int b = 0; b < sh.mNumBottles; b++) {            Bottle bh = (Bottle)sh.mBottles.elementAt(b);            za[b] = bh.mDValues[xPos];          }          // make a GeoDate object          GeoDate theDate = null;          try {            theDate = new GeoDate(sh.mMonth, sh.mDay, sh.mYear, hour, min, secs, msec);          }          catch (IllegalTimeValue ex) {            System.out.println("couldn't create a geodate");          }          String dType = sh.getType();          if (dType == null) {            dType = "UNKN";          }          EpicPtr epPtr = new EpicPtr(EPSConstants.NETCDFFORMAT, "JOA Export", dType, sech.mSectionDescription,                                      sh.mStnNum, sh.mLat, sh.mLon, theDate, za[0], za[sh.mNumBottles - 1],                                      sh.getOriginalName(), sh.getOriginalPath());          filePtrs.add(epPtr);          s++;        }      }    }    if (filePtrs.size() == 0) {      JFrame ff = new JFrame("Write EPIC Pointer File Error");      Toolkit.getDefaultToolkit().beep();      JOptionPane.showMessageDialog(ff,                                    "Could not write an EPIC Pointer file because all the current " + "\n" + "profiles are contained in section files--JOA can only write EPIC " +                                    "\n" + "pointer files for profiles that originate from EPIC netCDF files");    }    else {      // write the pointer file      try {        ptrDB.setData(filePtrs);        ptrDB.writePtrs();      }      catch (Exception ex) {        ex.printStackTrace();      }      // type the file if on the Mac      if (JOAConstants.ISMAC) {        try {          MRJFileUtils.setFileTypeAndCreator(outFile, new MRJOSType("TEXT"), new MRJOSType("JOAA"));        }        catch (IOException ex) {          System.out.println("couldn't type a Mac file");        }      }    }    progress.setPercentComplete(100.0);    progress.dispose();  }}