/* * $Id: ContourPlotSpecification.java,v 1.10 2005/06/17 18:04:10 oz Exp $ * */package javaoceanatlas.specifications;import java.awt.*;import javaoceanatlas.utility.*;import javaoceanatlas.ui.*;import java.awt.*;import org.w3c.dom.*;import com.fasterxml.jackson.core.JsonEncoding;import com.fasterxml.jackson.core.JsonFactory;import com.fasterxml.jackson.core.JsonGenerator;import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;import com.ibm.xml.parser.*;import org.xml.sax.*;import java.io.DataOutputStream;import java.io.File;import java.io.IOException;import javaoceanatlas.resources.*;public class ContourPlotSpecification implements PlotSpecification {	public static int LABEL_OFFSET_PARAMETER = 0;	public static int STN_NUM_OFFSET_PARAMETER = 1;	public static int LAT_OFFSET_PARAMETER = 2;	public static int LON_OFFSET_PARAMETER = 3;		private Interpolation mInterp;	private Interpolation mOverlayInterp = null;	private NewColorBar mColorBar;	private NewColorBar mOverlayColorBar;	private int mOffset;	private int mStyle;	private int mMarkers;	private int mMarkerSize;	private int mOverlayMarkers;	private int mOverlayMarkerSize = 2;	private boolean mPlotAxes;	private boolean mIncludeCBAR;	private boolean mIncludeObsPanel;	private boolean mBrowsingEnabled;	private boolean mAutoScaleXAxis;	private double mWinYPlotMax;	private double mWinYPlotMin;	private double mYInc;	private double mXAxisScale;	private int mYTics;	private int mXTics;	private String mWindowName;	private int mWidth;	private int mHeight;	private JOAVariable mYParam;	private JOAVariable mOvlYParam;	private Color mFG, mBG, mSymbolColor, mOverlaySymbolColor;	private boolean mColorLines;	private int mPlotEveryNthContour;	private int mLabelEveryNthContour;	private Object mOverlayContourColor;	private boolean mPlotBottom;	private boolean mPlotOverlayBottom;	private int mPlotEveryNthOvlContour = 1;	private int mLabelPrec = 3;	private int mOvlLabelPrec = 3;  private int mNX = 101;  private int mNY = 101;  private double mCAY = 5.0;  private int mNRng = 10;  private boolean mMask = false;  private int mXAxisLabels = LABEL_OFFSET_PARAMETER;  private int mSkipXAxisLabels = 0;	public ContourPlotSpecification() {	}	public ContourPlotSpecification(ContourPlotSpecification inSpec) {		mOverlayInterp = inSpec.mOverlayInterp;		mOverlayColorBar = inSpec.mOverlayColorBar;		mInterp = inSpec.mInterp;		mColorBar = inSpec.mColorBar;		mOffset = inSpec.mOffset;		mStyle = inSpec.mStyle;		mMarkers = inSpec.mMarkers;		mMarkerSize = inSpec.mMarkerSize;		mOverlayMarkers = inSpec.mOverlayMarkers;		mOverlayMarkerSize = inSpec.mOverlayMarkerSize;		mPlotAxes = inSpec.mPlotAxes;		mIncludeCBAR = inSpec.mIncludeCBAR;		mIncludeObsPanel = inSpec.mIncludeObsPanel;		mBrowsingEnabled = inSpec.mBrowsingEnabled;		mWinYPlotMax = inSpec.mWinYPlotMax;		mWinYPlotMin = inSpec.mWinYPlotMin;		mYInc = inSpec.mYInc;		mYTics = inSpec.mYTics;		mWindowName = inSpec.mWindowName;		mWidth = inSpec.mWidth;		mHeight = inSpec.mHeight;		mYParam = inSpec.mYParam;		mOvlYParam = inSpec.mOvlYParam;		mFG = inSpec.mFG;		mBG = inSpec.mBG;		mSymbolColor = inSpec.mSymbolColor;		mOverlaySymbolColor = inSpec.mOverlaySymbolColor;		mColorLines = inSpec.mColorLines;		mPlotEveryNthContour = inSpec.mPlotEveryNthContour;		mLabelEveryNthContour = inSpec.mLabelEveryNthContour;		mAutoScaleXAxis = inSpec.mAutoScaleXAxis;		mXAxisScale = inSpec.mXAxisScale;		mXTics = inSpec.mXTics;		mOverlayContourColor = inSpec.mOverlayContourColor;		mPlotBottom = inSpec.mPlotBottom;		mPlotOverlayBottom = inSpec.mPlotOverlayBottom;		mPlotEveryNthOvlContour = inSpec.mPlotEveryNthOvlContour;		mLabelPrec = inSpec.mLabelPrec;		mOvlLabelPrec = inSpec.mOvlLabelPrec;    mNRng = inSpec.getNRng();    mNX = inSpec.getNx();    mNY = inSpec.getNy();    mCAY = inSpec.getNy();    mMask = inSpec.isMask();    mXAxisLabels = inSpec.getXAxisLabels();    mSkipXAxisLabels = inSpec.getSkipXAxisLabels();	}	public void saveAsXML(FileViewer fv, Document doc, Element root) {	}	public double getWinYPlotMax() {		return mWinYPlotMax;	}	public void setWinYPlotMax(double d) {		mWinYPlotMax = d;	}	public double getWinYPlotMin() {		return mWinYPlotMin;	}	public void setWinYPlotMin(double d) {		mWinYPlotMin = d;	}	public int getYVarCode() {		return mYParam.getVariablePos();	}	public JOAVariable getYVar() {		return mYParam;	}	public void setYVar(JOAVariable v) {		mYParam = v;	}	public int getOvlYVarCode() {		return mOvlYParam.getVariablePos();	}	public JOAVariable getOvlYVar() {		return mOvlYParam;	}	public void setOvlYVar(JOAVariable v) {		mOvlYParam = v;	}	public int getYTics() {		return mYTics;	}	public void setYTics(int i) {		mYTics = i;	}	public int getXTics() {		return mXTics;	}	public void setXTics(int i) {		mXTics = i;	}	public int getWidth() {		return mWidth;	}	public void setWidth(int i) {		mWidth = i;	}	public int getHeight() {		return mHeight;	}	public void setHeight(int i) {		mHeight = i;	}	public double getYInc() {		return mYInc;	}	public void setYInc(double d) {		mYInc = d;	}	public String getWinTitle() {		return mWindowName;	}	public void setWinTitle(String s) {		mWindowName = new String(s);	}	public Color getFGColor() {		return mFG;	}	public void setFGColor(Color c) {		mFG = new Color(c.getRed(), c.getGreen(), c.getBlue());	}	public Color getBGColor() {		return mBG;	}	public void setBGColor(Color c) {		mBG = new Color(c.getRed(), c.getGreen(), c.getBlue());	}	public boolean isIncludeCBAR() {		return mIncludeCBAR;	}	public void setIncludeCBAR(boolean b) {		mIncludeCBAR = b;	}	public boolean isIncludeObsPanel() {		return mIncludeObsPanel;	}	public void setIncludeObsPanel(boolean b) {		mIncludeObsPanel = b;	}	public boolean isPlotAxes() {		return mPlotAxes;	}	public void setPlotAxes(boolean b) {		mPlotAxes = b;	}	public boolean isPlotBottom() {		return mPlotBottom;	}	public void setPlotBottom(boolean b) {		mPlotBottom = b;	}	public boolean isPlotOverlayBottom() {		return mPlotOverlayBottom;	}	public void setPlotOverlayBottom(boolean b) {		mPlotOverlayBottom = b;	}	public int getStyle() {		return mStyle;	}	public void setStyle(int i) {		mStyle = i;	}	public int getMarkers() {		return mMarkers;	}	public void setMarkers(int i) {		mMarkers = i;	}	public int getOverlayMarkers() {		return mOverlayMarkers;	}	public void setOverlayMarkers(int i) {		mOverlayMarkers = i;	}	public int getMarkerSize() {		return mMarkerSize;	}	public void setMarkerSize(int i) {		mMarkerSize = i;	}	public int getOverlayMarkerSize() {		return mOverlayMarkerSize;	}	public void setOverlayMarkerSize(int i) {		mOverlayMarkerSize = i;	}	public JOAVariable getYParam() {		return mYParam;	}	public void setYParam(JOAVariable v) {		mYParam = v;	}	public int getOffset() {		return mOffset;	}	public void setOffset(int i) {		mOffset = i;	}	public int getPlotEveryNthContour() {		return mPlotEveryNthContour;	}	public void setPlotEveryNthContour(int i) {		mPlotEveryNthContour = i;	}	public int getLabelEveryNthContour() {		return mLabelEveryNthContour;	}	public void setLabelEveryNthContour(int i) {		mLabelEveryNthContour = i;	}	public int getPlotEveryNthOvlContour() {		return mPlotEveryNthOvlContour;	}	public void setPlotEveryNthOvlContour(int i) {		mPlotEveryNthOvlContour = i;	}	public int getLabelPrecision() {		return mLabelPrec;	}		public int getOvlLabelPrecision() {;		return mOvlLabelPrec;	}	public void setLabelPrecision(int i) {		mLabelPrec = i;	}	public void setOvlLabelPrecision(int i) {		mOvlLabelPrec = i;	}	public double getXAxisScale() {		// pixels/km		return mXAxisScale;	}	public void setXAxisScale(double d) {		mXAxisScale = d;	}	public void setSymbolColor(Color c) {		mSymbolColor = new Color(c.getRed(), c.getGreen(), c.getBlue());	}	public Color getSymbolColor() {		return mSymbolColor;	}	public void setOverlaySymbolColor(Color c) {		mOverlaySymbolColor = new Color(c.getRed(), c.getGreen(), c.getBlue());	}	public Color getOverlaySymbolColor() {		return mOverlaySymbolColor;	}	public boolean isBrowsingEnabled() {		return mBrowsingEnabled;	}	public void setBrowsingEnabled(boolean b) {		mBrowsingEnabled = b;	}	public boolean isAutoScaleXAxis() {		return mAutoScaleXAxis;	}	public void setAutoScaleXAxis(boolean b) {		mAutoScaleXAxis = b;	}	public boolean isColorLines() {		return mColorLines;	}	public void setColorLines(boolean b) {		mColorLines = b;	}	public Interpolation getInterp() {		return mInterp;	}	public void setInterp(Interpolation in) {		mInterp = in;	}	public Interpolation getOverlayInterp() {		return mOverlayInterp;	}	public void setOverlayInterp(Interpolation in) {		mOverlayInterp = in;	}	public void setColorBar(NewColorBar cb) {		mColorBar = cb;	}	public NewColorBar getColorBar() {		return mColorBar;	}	public void setOverlayColorBar(NewColorBar cb) {		mOverlayColorBar = cb;	}	public NewColorBar getOverlayColorBar() {		return mOverlayColorBar;	}	public boolean isOverlayContours() {		return mOverlayContourColor != null;	}	public void setOverlayContourColor(Object o) {		mOverlayContourColor = o;	}	public Object getOverlayContourColor() {		return mOverlayContourColor;	}	public void writeToLog(String preamble) throws IOException {		try {			String ovlText = " (no overlay)";			String ovlText2 = " (no overlay contours)";			if (mOverlayInterp != null) {				ovlText = " (overlay = " + mOverlayInterp.getParam().getVarName() + ")";				ovlText2 = " (overlay contours = " + mOverlayColorBar.getTitle() + ")";			}			String offsetText = "Distance";			if (mOffset == JOAConstants.OFFSET_SEQUENCE)				offsetText = "Sequence";			else if (mOffset == JOAConstants.OFFSET_LATITUDE)				offsetText = "Latitude";			else if (mOffset == JOAConstants.OFFSET_LONGITUDE)				offsetText = "Longitude";			JOAConstants.LogFileStream.writeBytes(preamble + "\n");			JOAConstants.LogFileStream.writeBytes("\t" + "Var. = " + mInterp.getParam().getVarName() + ovlText			    + ", Contours = " + mColorBar.getTitle() + ovlText2 + ", Offset = " + offsetText + ", Y Min = "			    + JOAFormulas.formatDouble(mWinYPlotMin, 3, false) + ", Y Max = "			    + JOAFormulas.formatDouble(mWinYPlotMax, 3, false) + ", X Axis Scale = "			    + JOAFormulas.formatDouble(mXAxisScale, 4, false) + "\n");			JOAConstants.LogFileStream.flush();			// write the interpolation			mInterp.writeToLog("Interpolation:");		}		catch (IOException ex) {			throw ex;		}	}  public int getNRng() {    return mNRng;  }  public void setNRng(int i) {    mNRng = i;  }  public int getNx() {    return mNX;  }  public void setNx(int i) {    mNX = i;  }  public int getNy() {    return mNY;  }  public void setNy(int i) {    mNY = i;  }  public double getCAY() {    return mCAY;  }  public void setCAY(double d) {    mCAY = d;  }  public boolean isMask() {    return mMask;  }  public void setIsMask(boolean b) {  	mMask = b;  }	public void setXAxisLabels(int al) {	  mXAxisLabels = al;  }	public int getXAxisLabels() {	  return mXAxisLabels;  }	public void setSkipXAxisLabels(int ns) {	  mSkipXAxisLabels = ns;  }	public int getSkipXAxisLabels() {	  return mSkipXAxisLabels;  }			public String exportJSON(File file, Interpolation interp) {    		JsonFactory f = new JsonFactory();		JsonGenerator jsonGen;		try {			// test to see if it exists			jsonGen = f.createJsonGenerator(file, JsonEncoding.UTF8);			jsonGen.setPrettyPrinter(new DefaultPrettyPrinter());			jsonGen.writeStartObject();			// key value pairs go here			jsonGen.writeObjectFieldStart("contourplotspecification");					interp.exportJSON(file);			jsonGen.writeNumberField("offset", mOffset);			jsonGen.writeNumberField("style", mStyle);			jsonGen.writeNumberField("winyplotmax",  mWinYPlotMax);			jsonGen.writeNumberField("winyplotmin", mWinYPlotMin);			jsonGen.writeNumberField("markers", mMarkers);			jsonGen.writeNumberField("markersize", mMarkerSize);			jsonGen.writeBooleanField("plotaxes", mPlotAxes);			jsonGen.writeBooleanField("includeCBAR", mIncludeCBAR);			jsonGen.writeBooleanField("includeobspanel", mIncludeObsPanel);			jsonGen.writeBooleanField("autoscalexaxis", mAutoScaleXAxis);			jsonGen.writeBooleanField("browsingenabled", mBrowsingEnabled);			jsonGen.writeNumberField("yinc", mYInc);			jsonGen.writeNumberField("xaxisscale", mXAxisScale);			jsonGen.writeNumberField("ytics", mYTics);			jsonGen.writeNumberField("xtics",mXTics);			jsonGen.writeStringField("windowtitle", mWindowName);			jsonGen.writeStringField("yparam", mYParam.getVarName());			String hexStr = Integer.toHexString(mFG.getRGB());			jsonGen.writeStringField("fgcolor", "#" + hexStr);			hexStr = Integer.toHexString(mBG.getRGB());			jsonGen.writeStringField("bgcolor", "#" + hexStr);			hexStr = Integer.toHexString(mSymbolColor.getRGB());			jsonGen.writeStringField("connectstncolor", "#" + hexStr);			jsonGen.writeBooleanField("colorlines", mColorLines);			jsonGen.writeBooleanField("plotbottom", mPlotBottom);			jsonGen.writeNumberField("width", mWidth);			jsonGen.writeNumberField("height", mHeight);			jsonGen.writeNumberField("ploteverynthcontour", mPlotEveryNthContour);			jsonGen.writeNumberField("labeleverynthcontour", mLabelEveryNthContour);			jsonGen.writeNumberField("labelprec", mLabelPrec);			jsonGen.writeNumberField("skipxaxislabels", mSkipXAxisLabels);						jsonGen.writeEndObject(); // for field 'contourplotspecification'				 			jsonGen.close(); // important: will force flushing of output, close underlying								 // output stream					}		catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}     return null;	}}