/* * $Id: ConfigureStnFilter.java,v 1.9 2005/09/07 18:49:29 oz Exp $ * */package javaoceanatlas.ui;import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.util.*;import java.util.Timer;import javaoceanatlas.classicdatamodel.*;import javaoceanatlas.events.*;import javaoceanatlas.ui.widgets.*;import javaoceanatlas.utility.*;import javaoceanatlas.resources.*;import javaoceanatlas.filters.*;import javaoceanatlas.PowerOceanAtlas;@SuppressWarnings("serial")public class ConfigureParameterFilter extends JOAJDialog implements ActionListener, ButtonMaintainer, ItemListener,    ParameterAddedListener, DataAddedListener {  protected FileViewer mFileViewer;  protected JOAJButton mOKBtn = null;  protected JOAJButton mCancelButton = null;  protected ParameterFilter mParamFilter = null;  protected JOAJList mParamList = null;  protected boolean mIgnore = false;	private Timer timer = new Timer();  protected JOAJTextField mSectionNameField = null;  public ConfigureParameterFilter(JOAWindow par, FileViewer fv) {    super(par, "Parameter Filter", false);    mFileViewer = fv;    mParamFilter = new ParameterFilter(fv);    this.init();  }  private void buildParamList() {    Vector<String> listData = new Vector<String>();    for (int i = 0; i < mFileViewer.gNumProperties; i++) {      listData.addElement(mFileViewer.mAllProperties[i].getVarLabel());    }    if (mParamList == null) {      mParamList = new JOAJList(listData);    }    else {      mParamList.setListData(listData);      mParamList.invalidate();    }  }  public void init() {    ResourceBundle b = ResourceBundle.getBundle("javaoceanatlas.resources.JOAResources");    // fill the parameter list    buildParamList();    Container contents = this.getContentPane();    this.getContentPane().setLayout(new BorderLayout(0, 0));    JPanel upperPanel = new JPanel();    upperPanel.setLayout(new BorderLayout(0, 0));    JPanel paramSelPanel = new JPanel();    paramSelPanel.setLayout(new GridLayout(1, 2, 5, 5));    // param selection    mParamList.setVisibleRowCount(5);    mParamList.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    mParamList.setPrototypeCellValue("SALT         ");    // restore any highlighting to param list    if (mParamFilter.getMissingParams() != null && mParamFilter.getMissingParams().length > 0) {      mParamList.setSelectedIndices(mParamFilter.getMissingParams());    }    JScrollPane listScroller2 = new JScrollPane(mParamList);    paramSelPanel.add(new TenPixelBorder(listScroller2, 0, 5, 0, 0));    JTextArea ta = new JTextArea(2, 25);    ta.setLineWrap(true);    ta.setBackground(this.getBackground());    ta.setText(b.getString("kBottleFilterHelp"));    int size = 12;    if (JOAConstants.ISSUNOS) {      size = 14;    }    ta.setFont(new Font("Courier", Font.PLAIN, size));    ta.setEditable(false);    paramSelPanel.add(ta);    upperPanel.add(paramSelPanel, "Center");    JPanel namePanel = new JPanel();    namePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 5));    JOAJLabel mNameLbl = new JOAJLabel(b.getString("kNewSectionName"));    namePanel.add(mNameLbl);    mSectionNameField = new JOAJTextField(20);    mSectionNameField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));    namePanel.add(mSectionNameField);    upperPanel.add(namePanel, "South");    contents.add(new TenPixelBorder(upperPanel, 5, 5, 5, 5), "Center");    // lower panel    mOKBtn = new JOAJButton(b.getString("kOK"));    mOKBtn.setActionCommand("ok");    this.getRootPane().setDefaultButton(mOKBtn);    mCancelButton = new JOAJButton(b.getString("kClose"));    mCancelButton.setActionCommand("cancel");    JPanel dlgBtnsInset = new JPanel();    JPanel dlgBtnsPanel = new JPanel();    dlgBtnsInset.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 1));    dlgBtnsPanel.setLayout(new GridLayout(1, 4, 15, 1));    if (JOAConstants.ISMAC) {      dlgBtnsPanel.add(mCancelButton);      dlgBtnsPanel.add(mOKBtn);    }    else {      dlgBtnsPanel.add(mOKBtn);      dlgBtnsPanel.add(mCancelButton);    }    dlgBtnsInset.add(dlgBtnsPanel);    mOKBtn.addActionListener(this);    mCancelButton.addActionListener(this);    contents.add(new TenPixelBorder(dlgBtnsInset, 5, 5, 5, 5), "South");    this.pack();    mFileViewer.addParameterAddedListener(this);    mFileViewer.addDataAddedListener(this);    runTimer();    // show dialog at center of screen    this.pack();    Rectangle dBounds = this.getBounds();    Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();    int x = sd.width / 2 - dBounds.width / 2;    int y = sd.height / 2 - dBounds.height / 2;    this.setLocation(x, y);  }	public void runTimer() {		TimerTask task = new TimerTask() {			public void run() {				maintainButtons();			}		};		timer.schedule(task, 0, 1000);	}  public void parameterAdded(ParameterAddedEvent evt) {    updateFilter();    // redo the parameter list    buildParamList();    // restore the highlighting    if (mParamFilter.getMissingParams() != null && mParamFilter.getMissingParams().length > 0) {      mParamList.setSelectedIndices(mParamFilter.getMissingParams());    }  }  public void dataAdded(DataAddedEvent evt) {    updateFilter();    // redo the parameter list    buildParamList();    // restore the highlighting    if (mParamFilter.getMissingParams() != null && mParamFilter.getMissingParams().length > 0) {      mParamList.setSelectedIndices(mParamFilter.getMissingParams());    }  }  public void itemStateChanged(ItemEvent evt) {}  public void actionPerformed(ActionEvent e) {    String cmd = e.getActionCommand();    if (cmd.equals("cancel")) {      timer.cancel();      this.dispose();    }    else if (cmd.equals("ok")) {      updateFilter();      // process stations      // first create a vector to hold new stations      Vector<SectionStation> mFoundStns = new Vector<SectionStation>(200);      // stuff the existing stations into this Vector      int ord = 0;      for (int fc = 0; fc < mFileViewer.mNumOpenFiles; fc++) {        OpenDataFile of = (OpenDataFile)mFileViewer.mOpenFiles.elementAt(fc);        for (int sec = 0; sec < of.mNumSections; sec++) {          Section sech = (Section)of.mSections.elementAt(sec);          if (sech.mNumCasts == 0 || !mParamFilter.testSection(mFileViewer, sech)) {            continue;          }          for (int stc = 0; stc < sech.mStations.size(); stc++) {            Station sh = (Station)sech.mStations.elementAt(stc);            if (!sh.mUseStn) {              continue;            }            // test the bottles            boolean keepStn = false;            for (int b = 0; b < sh.getNumBottles(); b++) {              Bottle bh = (Bottle)sh.mBottles.elementAt(b);              boolean keepBottle = mParamFilter.testBottle(mFileViewer, sech, bh);              if (keepBottle) {                keepStn = true;              }              bh.setUseBottle(keepBottle);            }            if (keepStn) {              mFoundStns.addElement(new SectionStation(sh, sech, ord++));            }          }        }      }      // make a new file viewer      Frame fr = new Frame();      FileViewer ff = new FileViewer(fr, mFoundStns, mSectionNameField.getText(), mFileViewer, false);      PowerOceanAtlas.getInstance().addOpenFileViewer(ff);      ff.pack();      ff.setVisible(true);      ff.requestFocus();      ff.setSavedState(JOAConstants.CREATEDONTHEFLY, null);      timer.cancel();      this.dispose();    }  }  public boolean updateFilter() {    boolean error = false;    // parameter filter    if (mParamList.getSelectedIndex() >= 0) {      mParamFilter.setMissingParams(mParamList.getSelectedIndices().length, mParamList.getSelectedIndices());    }    return error;  }  public void maintainButtons() {    if (mParamList.getSelectedIndices().length > 0) {      mOKBtn.setEnabled(true);    }    else {      mOKBtn.setEnabled(false);    }  }}