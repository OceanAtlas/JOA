/* * $Id: JOAEnumValsTableModel.java,v 1.1 2005/10/18 23:42:19 oz Exp $ * * This software is provided by NOAA for full, free and open release.  It is * understood by the recipient/user that NOAA assumes no liability for any * errors contained in the code.  Although this software is released without * conditions or restrictions in its use, it is expected that appropriate * credit be given to its author and to the National Oceanic and Atmospheric * Administration should the software be included by the recipient as an * element in other product development. */package javaoceanatlas.ui;import javax.swing.event.TableModelListener;import javax.swing.table.TableModel;import javax.swing.event.TableModelEvent;import java.util.Vector;import java.util.Enumeration;import javaoceanatlas.classicdatamodel.Station;import javaoceanatlas.classicdatamodel.Section;import javaoceanatlas.classicdatamodel.Bottle;import javaoceanatlas.ui.widgets.StnEditorCell;import javaoceanatlas.ui.widgets.StnEditorBottleQCCell;import javaoceanatlas.utility.JOAFormulas;/** * <pre> * Title:        netCDF File Browser * Description:  General purpose netCDF file Browser. * Copyright:    Copyright (c) 2000 * Company:      NOAA/PMEL/EPIC * </pre> * @author Donald Denbo * @version $Revision: 1.1 $, $Date: 2005/10/18 23:42:19 $ */public class JOAEnumValsTableModel implements TableModel {  private String[] colNames;  private short[] colPrecisions;  private Vector<Object>[] values;  private Vector<Object>[] cells;  private int rowCount = 0;  private int colCount = 0;  private boolean mTableValuesChanged = false;  private Vector<TableModelListener> listeners = new Vector<TableModelListener>();  @SuppressWarnings("unchecked")  public JOAEnumValsTableModel(Station inStn, Section inSection) {    // assign the column names    colCount = inSection.getNumParams() + 1;    // add space for the bottle qc column    colNames = new String[colCount + 1];    colPrecisions = new short[colCount + 1];    values = new Vector[colCount + 1];    cells = new Vector[colCount + 1];    short qcStd = (short)inSection.getQCStandard();    colNames[0] = "Bottle QC";    colPrecisions[0] = 3;    for (int i = 0; i < colCount + 1; i++) {      values[i] = new Vector<Object>();      cells[i] = new Vector<Object>();    }    for (int i = 0; i < colCount; i++) {      String param = inSection.getParam(i);      String units = inSection.getParamUnits(i);      colNames[i + 1] = param + " (" + units + ")";      colPrecisions[i + 1] = JOAFormulas.paramNameToEditPrecision(param);    }    for (int b = 0; b < inStn.mNumBottles; b++) {      Bottle bh = (Bottle)inStn.mBottles.elementAt(b);      cells[0].addElement(new StnEditorBottleQCCell(bh, qcStd));      values[0].addElement(new Short(bh.mQualityFlag));      for (int v = 0; v < colCount; v++) {        values[v + 1].addElement(new Double(bh.mDValues[v]));        cells[v + 1].addElement(new StnEditorCell(bh, v, qcStd, colPrecisions[v + 1]));      }      rowCount++;    }  }  public Object getValAt(int rowIndex) {    return null;  }  public int getRowCount() {    return rowCount;  }  public int getColumnCount() {    return colCount;  }  public String getColumnName(int columnIndex) {    return colNames[columnIndex];  }  @SuppressWarnings("unchecked")  public Class getColumnClass(int columnIndex) {    return colNames[columnIndex].getClass();  }  public boolean isCellEditable(int rowIndex, int columnIndex) {    return true;  }  public Object getValueAt(int rowIndex, int columnIndex) {    return cells[columnIndex].elementAt(rowIndex);  }  public boolean isTableChanged() {    return mTableValuesChanged;  }  public void setValueAt(Object aValue, int rowIndex, int columnIndex) {    fireTableModelChange(rowIndex, rowIndex, columnIndex, TableModelEvent.UPDATE);  }  public void addTableModelListener(TableModelListener l) {    listeners.add(l);  }  public void removeTableModelListener(TableModelListener l) {    listeners.remove(l);  }  private void fireTableModelChange(int firstRow, int lastRow, int column, int type) {    TableModelEvent tme = new TableModelEvent(this, firstRow, lastRow, column, type);    Enumeration<TableModelListener> iter = listeners.elements();    while (iter.hasMoreElements()) {      ((TableModelListener)iter.nextElement()).tableChanged(tme);    }  }  public boolean isColumnListChanged(Section newSection) {    return false;  }}