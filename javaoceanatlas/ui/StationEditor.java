/* * $Id: StationEditor.java,v 1.1 2005/10/18 23:42:19 oz Exp $ * */package javaoceanatlas.ui;import java.awt.*;import java.awt.event.*;import java.util.*;import java.util.Timer;import javax.swing.*;import javax.swing.border.*;import javax.swing.table.*;import javax.swing.event.*;import javaoceanatlas.utility.TenPixelBorder;import javaoceanatlas.utility.ButtonMaintainer;import javaoceanatlas.events.ObsChangedListener;import javaoceanatlas.events.StnFilterChangedListener;import javaoceanatlas.events.WindowsMenuChangedListener;import javaoceanatlas.events.ParameterAddedListener;import javaoceanatlas.events.ObsChangedEvent;import javaoceanatlas.events.ParameterAddedEvent;import javaoceanatlas.events.StnFilterChangedEvent;import javaoceanatlas.classicdatamodel.Station;import javaoceanatlas.classicdatamodel.Section;import javaoceanatlas.classicdatamodel.OpenDataFile;import javaoceanatlas.classicdatamodel.Bottle;import javaoceanatlas.ui.widgets.JOAJButton;import javaoceanatlas.ui.widgets.StnEditorCellRenderer;import javaoceanatlas.ui.widgets.StnEditorBottleQCCellRenderer;import javaoceanatlas.ui.widgets.JOAJToolBar;import javaoceanatlas.ui.widgets.JOAJToggleButton;import javaoceanatlas.ui.widgets.JOAJComboBox;import javaoceanatlas.ui.widgets.SmallIconButton;import javaoceanatlas.ui.widgets.JOAJTextField;import javaoceanatlas.ui.widgets.StnEditorCell;import javaoceanatlas.ui.widgets.StnEditorBottleQCCell;import javaoceanatlas.ui.widgets.StnEditorQCCellEditor;import javaoceanatlas.ui.widgets.StnEditorCellEditor;import javaoceanatlas.ui.JOAMenuBar;import javaoceanatlas.utility.ColumnLayout;import javaoceanatlas.utility.JOAFormulas;import javaoceanatlas.utility.Orientation;import javaoceanatlas.ui.widgets.JOAJLabel;import javaoceanatlas.resources.JOAConstants;import gov.noaa.pmel.swing.Swatch;import javaoceanatlas.PowerOceanAtlas;@SuppressWarnings("serial")public class StationEditor extends JOAWindow implements ButtonMaintainer, ActionListener, ObsChangedListener,    DocumentListener, ParameterAddedListener, StnFilterChangedListener, WindowsMenuChangedListener, ItemListener {	private FileViewer mFileViewer = null;	private ResourceBundle b;	private Timer timer = new Timer();	private JTable mValsTable;	private JOAEnumValsTableModel mStnValsModel;	private boolean mWindowIsLocked = false;	private JOAJButton mOKBtn;	private JOAJButton mRevertBtn;	private SmallIconButton mLeftBtn;	private SmallIconButton mRightBtn;	private JOAJComboBox mActions;	private JOAJComboBox mWOCESampQCActions;	private JOAJComboBox mWOCEValQCActions;	private JOAJComboBox mIGOSSQCActions;	private JOAJTextField mLatField = null;	private JOAJTextField mLonField = null;	private JOAJTextField mSectionField = null;	private JOAJTextField mStnNumField = null;	private JOAJTextField mCastNumField = null;	private JOAJTextField mShipCodeField = null;	private JOAJTextField mYearField = null;	private JOAJTextField mMonthField = null;	private JOAJTextField mDayField = null;	private JOAJTextField mHourField = null;	private JOAJTextField mMinField = null;	private JOAJTextField mBottomField = null;	private Swatch mSectionColor = null;	private boolean mStnMetatdataEdited = false;	protected StationEditor mThis = null;	private Station mCurrStn;	private Section mCurrSec;	private int mIgnoreItemChange = 0;	public StationEditor(JOAWindow par, FileViewer fv) {		super(false, true, false, false, true, null);		mFileViewer = fv;		init();	}	public void init() {		this.setTitle("Station Editor: " + mFileViewer.getTitle());		b = ResourceBundle.getBundle("javaoceanatlas.resources.JOAResources");		Container contents = getContentPane();		contents.setLayout(new BorderLayout(5, 5));		JPanel topPanel = new JPanel();		topPanel.setLayout(new BorderLayout(5, 5));		TitledBorder tb = BorderFactory.createTitledBorder(b.getString("kCurrentStation"));		JPanel stnDetailPanel = new JPanel();		stnDetailPanel.setLayout(new ColumnLayout(Orientation.LEFT, Orientation.CENTER, 5));		stnDetailPanel.setBorder(tb);		getRootPane().registerKeyboardAction(new RightListener((Object) this, this.getClass()),		    KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0, false), JComponent.WHEN_FOCUSED);		getRootPane().registerKeyboardAction(new LeftListener((Object) this, this.getClass()),		    KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0, false), JComponent.WHEN_FOCUSED);		getRootPane().registerKeyboardAction(new UpListener((Object) this, this.getClass()),		    KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0, false), JComponent.WHEN_FOCUSED);		getRootPane().registerKeyboardAction(new DownListener((Object) this, this.getClass()),		    KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0, false), JComponent.WHEN_FOCUSED);		// current station		OpenDataFile of = (OpenDataFile) mFileViewer.mOpenFiles.currElement();		Section mSec = (Section) of.mSections.currElement();		Station mStn = (Station) mSec.mStations.currElement();		mCurrStn = null;		mCurrSec = null;		// Section line		JPanel line1 = new JPanel();		line1.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 1));		line1.add(new JOAJLabel(b.getString("kSection")));		mSectionField = new JOAJTextField();		mSectionField.setColumns(15);		mSectionField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		line1.add(mSectionField);		line1.add(new JOAJLabel(b.getString("kMapColor")));		mSectionColor = new Swatch(JOAConstants.DEFAULT_CONTENTS_COLOR, 12, 12);		line1.add(mSectionColor);		// stn/cast num line		JPanel line2 = new JPanel();		line2.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 1));		line2.add(new JOAJLabel(b.getString("kStationNumber")));		mStnNumField = new JOAJTextField();		mStnNumField.setColumns(6);		mStnNumField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mStnNumField.getDocument().addDocumentListener(this);		line2.add(mStnNumField);		line2.add(new JOAJLabel(b.getString("kCastNumber")));		mCastNumField = new JOAJTextField();		mCastNumField.setColumns(2);		mStnNumField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mStnNumField.getDocument().addDocumentListener(this);		line2.add(mCastNumField);		// location line		JPanel line4 = new JPanel();		line4.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 1));		line4.add(new JOAJLabel(b.getString("kLongitudeColon")));		mLonField = new JOAJTextField();		mLonField.setColumns(5);		mLonField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mLonField.getDocument().addDocumentListener(this);		line4.add(mLonField);		line4.add(new JOAJLabel(b.getString("kLatitudeColon")));		mLatField = new JOAJTextField();		mLatField.setColumns(5);		mLatField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mLatField.getDocument().addDocumentListener(this);		line4.add(mLatField);		// date/ship/bottom		JPanel line5 = new JPanel();		line5.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 1));		line5.add(new JOAJLabel(b.getString("kDate") + "  "));		line5.add(new JOAJLabel(b.getString("kMM")));		mMonthField = new JOAJTextField();		mMonthField.setColumns(2);		mMonthField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mMonthField.getDocument().addDocumentListener(this);		line5.add(mMonthField);		line5.add(new JOAJLabel(b.getString("kDD")));		mDayField = new JOAJTextField();		mDayField.setColumns(2);		mDayField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mDayField.getDocument().addDocumentListener(this);		line5.add(mDayField);		line5.add(new JOAJLabel(b.getString("kYYYY")));		mYearField = new JOAJTextField();		mYearField.setColumns(4);		mYearField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mYearField.getDocument().addDocumentListener(this);		line5.add(mYearField);		line5.add(new JOAJLabel(b.getString("kHH")));		mHourField = new JOAJTextField();		mHourField.setColumns(2);		mHourField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mHourField.getDocument().addDocumentListener(this);		line5.add(mHourField);		line5.add(new JOAJLabel(b.getString("kMM.M")));		mMinField = new JOAJTextField();		mMinField.setColumns(4);		mMinField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mMinField.getDocument().addDocumentListener(this);		line5.add(mMinField);		JPanel line6 = new JPanel();		line6.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 1));		line6.add(new JOAJLabel(b.getString("kBottom")));		mBottomField = new JOAJTextField();		mBottomField.setColumns(4);		mBottomField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mBottomField.getDocument().addDocumentListener(this);		line6.add(mBottomField);		line6.add(new JOAJLabel(b.getString("kShipCode")));		mShipCodeField = new JOAJTextField();		mShipCodeField.setColumns(10);		mShipCodeField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));		mShipCodeField.getDocument().addDocumentListener(this);		line6.add(mShipCodeField);		stnDetailPanel.add(line1);		stnDetailPanel.add(line2);		stnDetailPanel.add(line4);		stnDetailPanel.add(line5);		stnDetailPanel.add(line6);		topPanel.add(new TenPixelBorder(stnDetailPanel, 5, 5, 0, 5), "South");		// add the toolbar		JOAJToolBar mToolBar = new JOAJToolBar();		JOAJToggleButton lockTool = new JOAJToggleButton(new ImageIcon(getClass().getResource("images/lock_open.gif")),		    true);		lockTool.setSelectedIcon(new ImageIcon(getClass().getResource("images/lock_closed.gif")));		lockTool.setSelected(false);		lockTool.setToolTipText(b.getString("kLockPlot"));		lockTool.setActionCommand("lock");		lockTool.addActionListener(this);		mToolBar.add(lockTool);		topPanel.add(mToolBar, "North");		contents.add(topPanel, "North");		// create the JTable for the middle panel		mStnValsModel = new JOAEnumValsTableModel(mStn, mSec);		mValsTable = new JTable(mStnValsModel);		mValsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);		mValsTable.setRowHeight(20);		mValsTable.setColumnSelectionAllowed(true);		mValsTable.setRowSelectionAllowed(false);		JTableHeader header = mValsTable.getTableHeader();		header.addMouseListener(new ColumnHeaderListener());		int numCols = mStnValsModel.getColumnCount();		TableColumn tc;		tc = mValsTable.getColumnModel().getColumn(0);		tc.setMinWidth(100);		tc.setResizable(true);		tc.setCellRenderer(new StnEditorBottleQCCellRenderer(true));		for (int i = 1; i < numCols; i++) {			tc = mValsTable.getColumnModel().getColumn(i);			tc.setMinWidth(100);			tc.setCellRenderer(new StnEditorCellRenderer(true));			tc.setResizable(true);		}		mValsTable.setGridColor(new Color(100, 100, 100));		mValsTable.setShowVerticalLines(true);		mValsTable.setCellSelectionEnabled(true);		JScrollPane scroller = new JScrollPane();		mValsTable.setPreferredScrollableViewportSize(new Dimension(500, 200));		scroller.getViewport().add(mValsTable);		contents.add("Center", new TenPixelBorder(scroller, 15, 15, 15, 15));		// Add the navigation and action buttons at the bottom		mOKBtn = new JOAJButton(b.getString("kDone2"));		mOKBtn.setActionCommand("ok");		this.getRootPane().setDefaultButton(mOKBtn);		mRevertBtn = new JOAJButton(b.getString("kRevert"));		mRevertBtn.setActionCommand("revert");		mLeftBtn = new SmallIconButton(new ImageIcon(getClass().getResource("images/Left_Arrow.gif")));		mLeftBtn.setActionCommand("left");		mRightBtn = new SmallIconButton(new ImageIcon(getClass().getResource("images/Right_Arrow.gif")));		mRightBtn.setActionCommand("right");				mLeftBtn.setToolTipText("Move to previous station");		mRightBtn.setToolTipText("Move to next station");			mActions = new JOAJComboBox();		mWOCESampQCActions = new JOAJComboBox();		mWOCEValQCActions = new JOAJComboBox();		mIGOSSQCActions = new JOAJComboBox();		mActions.addItem(b.getString("kActions"));		mActions.addItem("Set selection to missing value");		mActions.addItemListener(this);		mWOCESampQCActions.addItem("Set Bottle WOCE QC to:");		mWOCESampQCActions.addItem("1--information unavailable");		mWOCESampQCActions.addItem("2--No problems");		mWOCESampQCActions.addItem("3--Leaking");		mWOCESampQCActions.addItem("4--Did not trip correctly");		mWOCESampQCActions.addItem("5--Not reported");		mWOCESampQCActions.addItem("6--Significant discrepancy");		mWOCESampQCActions.addItem("7--Unknown problem");		mWOCESampQCActions.addItem("8--Pair did not trip correctly");		mWOCESampQCActions.addItem("9--Samples not drawn");		mWOCESampQCActions.addItemListener(this);		mWOCEValQCActions.addItem("Set Parameter WOCE QC to: ");		mWOCEValQCActions.addItem("1--Analysis not received/Not calib.");		mWOCEValQCActions.addItem("2--Acceptable measurement");		mWOCEValQCActions.addItem("3--Questionable measurement");		mWOCEValQCActions.addItem("4--Bad measurement");		mWOCEValQCActions.addItem("5--Not reported");		mWOCEValQCActions.addItem("6--Mean of reps/Interp. >2db int.");		mWOCEValQCActions.addItem("7--Manual chrom. peak/Despiked");		mWOCEValQCActions.addItem("8--Irreg. chrom. peak/Not assigned");		mWOCEValQCActions.addItem("9--Sample not drawn/Not sampled");		mWOCEValQCActions.addItemListener(this);		mIGOSSQCActions.addItem("Set IGOSS Sample/Value QC to:");		mIGOSSQCActions.addItem("0--No qc yet assigned");		mIGOSSQCActions.addItem("1--Appears to be correct");		mIGOSSQCActions.addItem("2--Probably good");		mIGOSSQCActions.addItem("3--Probably bad");		mIGOSSQCActions.addItem("4--Appears erroneous");		mIGOSSQCActions.addItem("5--Has been changed");		mIGOSSQCActions.addItem("6--Future use");		mIGOSSQCActions.addItem("7--Future use");		mIGOSSQCActions.addItem("8--Future use");		mIGOSSQCActions.addItem("9--Missing");		mIGOSSQCActions.addItemListener(this);		JPanel dlgBtnsPanel = new JPanel();		dlgBtnsPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 0, 1));		dlgBtnsPanel.add(mOKBtn);		dlgBtnsPanel.add(new JLabel("  "));		dlgBtnsPanel.add(mRevertBtn);		dlgBtnsPanel.add(new JLabel("    "));		dlgBtnsPanel.add(mLeftBtn);		dlgBtnsPanel.add(mRightBtn);		dlgBtnsPanel.add(new JLabel("  "));		JPanel actionPanel = new JPanel();		actionPanel.setLayout(new GridLayout(2, 2, 5, 5));		actionPanel.add(mActions);		actionPanel.add(mWOCESampQCActions);		actionPanel.add(mWOCEValQCActions);		actionPanel.add(mIGOSSQCActions);		dlgBtnsPanel.add(actionPanel);		contents.add("South", new TenPixelBorder(dlgBtnsPanel, 15, 15, 15, 15));		mRevertBtn.addActionListener(this);		mOKBtn.addActionListener(this);		mLeftBtn.addActionListener(this);		mRightBtn.addActionListener(this);    runTimer();		// events we listen for		mFileViewer.addObsChangedListener(this);		mFileViewer.addParameterAddedListener(this);		PowerOceanAtlas.getInstance().addWindowsMenuChangedListener(this);		mThis = this;		WindowListener windowListener = new WindowAdapter() {			public void windowClosing(java.awt.event.WindowEvent e) {				closeMe();			}		};		this.addWindowListener(windowListener);		mFileViewer.addOpenWindow(this);		mMenuBar = new JOAMenuBar(this, true, true, mFileViewer);		// show dialog at center of screen		this.pack();		Rectangle dBounds = this.getBounds();		Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();		int x = sd.width / 2 - dBounds.width / 2;		int y = sd.height / 2 - dBounds.height / 2;		this.setLocation(x, y);		setNewStn(mSec, mStn);	}	public void runTimer() {		TimerTask task = new TimerTask() {			public void run() {				maintainButtons();			}		};		timer.schedule(task, 0, 1000);	}	private void closeMe() {		if (isTableChanged() || mStnMetatdataEdited) {			updateStation();		}		mFileViewer.removeStnFilterChangedListener((StnFilterChangedListener) mThis);		mFileViewer.removeObsChangedListener((ObsChangedListener) mThis);		mFileViewer.removeStnEditor(mThis);		mFileViewer.removeParameterAddedListener((ParameterAddedListener) mThis);		timer.cancel();		this.dispose();	}	public void obsChanged(ObsChangedEvent evt) {		// display the current station		Station sh = evt.getFoundStation();		Section sech = evt.getFoundSection();		setNewStn(sech, sh);	}	public void parameterAdded(ParameterAddedEvent evt) {		if (mWindowIsLocked) { return; }		updateTableModel(mCurrSec, mCurrStn);	}	public void setNewStn(Section inSec, Station inStn) {		if (mWindowIsLocked) { return; }		if (inStn != mCurrStn) {			mSectionField.setText(inSec.mSectionDescription);			mSectionColor.setColor(inSec.mSectionColor);			mStnNumField.setText(inStn.mStnNum);			mCastNumField.setText(String.valueOf(inStn.mCastNum));			mLonField.setText(JOAFormulas.formatDouble(String.valueOf(inStn.mLon), 3, false));			mLatField.setText(JOAFormulas.formatDouble(String.valueOf(inStn.mLat), 3, false));			mYearField.setText(String.valueOf(inStn.mYear));			mMonthField.setText(String.valueOf(inStn.mMonth));			mDayField.setText(String.valueOf(inStn.mDay));			if (inStn.mHour != JOAConstants.MISSINGVALUE) {				mHourField.setText(String.valueOf(inStn.mHour));			}			else {				mHourField.setText("");			}			if (inStn.mMinute != JOAConstants.MISSINGVALUE) {				mMinField.setText(String.valueOf(inStn.mMinute));			}			else {				mMinField.setText("");			}			mBottomField.setText(String.valueOf(inStn.mBottomDepthInDBARS));			mShipCodeField.setText(inStn.mShipCode);			mStnMetatdataEdited = false;			updateTableModel(inSec, inStn);		}		else {		}	}	private void updateTableModel(Section inSec, Station inStn) {		// change the station model to the new stnvals		mStnValsModel = new JOAEnumValsTableModel(inStn, inSec);		mValsTable.setModel(mStnValsModel);		int numCols = mStnValsModel.getColumnCount();		TableColumn tc;		tc = mValsTable.getColumnModel().getColumn(0);		tc.setMinWidth(100);		tc.setResizable(true);		tc.setCellRenderer(new StnEditorBottleQCCellRenderer(true));		tc.setCellEditor(new StnEditorQCCellEditor(new JTextField()));		for (int i = 1; i < numCols; i++) {			tc = mValsTable.getColumnModel().getColumn(i);			tc.setMinWidth(100);			tc.setCellRenderer(new StnEditorCellRenderer(true));			tc.setCellEditor(new StnEditorCellEditor(new JTextField()));			tc.setResizable(true);		}		mCurrStn = inStn;		mCurrSec = inSec;	}	public void maintainButtons() {		if (mWindowIsLocked) {			// disable the arrow buttons			mLeftBtn.setEnabled(false);			mRightBtn.setEnabled(false);		}		else {			mLeftBtn.setEnabled(true);			mRightBtn.setEnabled(true);		}		if (isTableChanged() || mStnMetatdataEdited) {			mRevertBtn.setEnabled(true);		}		else {			mRevertBtn.setEnabled(false);		}		if (mValsTable.getSelectedRowCount() > 0) {			mActions.setEnabled(true);			if (mCurrSec.getQCStandard() != JOAConstants.NONE_QC_STD) {				if (mCurrSec.getQCStandard() == JOAConstants.WOCE_QC_STD) {					mWOCESampQCActions.setEnabled(true);					mWOCEValQCActions.setEnabled(true);				}				else {					mWOCESampQCActions.setEnabled(false);					mWOCEValQCActions.setEnabled(false);				}				if (mCurrSec.getQCStandard() == JOAConstants.IGOSS_QC_STD) {					mIGOSSQCActions.setEnabled(true);				}				else {					mIGOSSQCActions.setEnabled(false);				}			}			else {				mWOCESampQCActions.setEnabled(true);				mWOCEValQCActions.setEnabled(true);				mIGOSSQCActions.setEnabled(true);			}		}		else {			mActions.setEnabled(false);			mWOCESampQCActions.setEnabled(false);			mWOCEValQCActions.setEnabled(false);			mIGOSSQCActions.setEnabled(false);		}		if (mActions.isEnabled()) {			if (mActions.getSelectedIndex() != 0) {				mIgnoreItemChange++;				mActions.setSelectedIndex(0);			}			if (mWOCESampQCActions.getSelectedIndex() != 0) {				mIgnoreItemChange++;				mWOCESampQCActions.setSelectedIndex(0);			}			if (mWOCEValQCActions.getSelectedIndex() != 0) {				mIgnoreItemChange++;				mWOCEValQCActions.setSelectedIndex(0);			}			if (mIGOSSQCActions.getSelectedIndex() != 0) {				mIgnoreItemChange++;				mIGOSSQCActions.setSelectedIndex(0);			}		}	}	public RubberbandPanel getPanel() {		return null;	}	public void actionPerformed(ActionEvent e) {		String cmd = e.getActionCommand();		if (cmd.equals("lock")) {			mWindowIsLocked = !mWindowIsLocked;			if (!mWindowIsLocked) {				// unlocking the window				OpenDataFile of = (OpenDataFile) mFileViewer.mOpenFiles.currElement();				Section mSec = (Section) of.mSections.currElement();				Station mStn = (Station) mSec.mStations.currElement();				setNewStn(mSec, mStn);			}		}		else if (cmd.equals("left")) {			mLeftBtn.setSelected(false);			findByArrowKey(new Integer(2));		}		else if (cmd.equals("right")) {			mRightBtn.setSelected(false);			findByArrowKey(new Integer(1));		}		else if (cmd.equals("ok")) {			// read the table entries and see if anything changed			if (isTableChanged() || mStnMetatdataEdited) {				updateStation();			}			timer.cancel();			this.dispose();		}		else if (cmd.equals("revert")) {			// read the table entries and see if anything changed			if (isTableChanged() || mStnMetatdataEdited) {				revertStation();				revertChangesToStation();				mStnMetatdataEdited = false;				updateTableModel(mCurrSec, mCurrStn);			}		}		else if (cmd.equals("selectall")) {			mValsTable.selectAll();		}		else if (cmd.equals("close")) {			closeMe();		}	}	public boolean findByArrowKey(Integer direction) {		if (mWindowIsLocked) { return false; }		OpenDataFile foundFile = null;		Section foundSection = null;		Station foundStation = null;		Bottle foundBottle = null;		int pPos = mFileViewer.getPRESPropertyPos();		boolean found = false;		OpenDataFile of = (OpenDataFile) mFileViewer.mOpenFiles.currElement();		Section sech = (Section) of.mSections.currElement();		Station sh = (Station) sech.mStations.currElement();		// find new observation		found = false;		switch (direction.intValue()) {			case 1: // JOAConstants.NEXTSTN:				// go to next station				foundStation = (Station) sech.mStations.nextElement();				if (foundStation == null) {					// go to next section					foundSection = (Section) of.mSections.nextElement();					foundFile = of;					if (foundSection != null) {						foundSection.mStations.setCurrElementToFirst();						foundStation = (Station) foundSection.mStations.currElement();						foundBottle = JOAFormulas.findBottleByPres(mFileViewer, foundStation);						found = true;						if (foundBottle != null) {							found = true;						}					}					else {						// look in next file						foundFile = (OpenDataFile) mFileViewer.mOpenFiles.nextElement();						if (foundFile != null) {							foundSection = (Section) foundFile.mSections.currElement();							foundStation = (Station) foundSection.mStations.currElement();							foundBottle = JOAFormulas.findBottleByPres(mFileViewer, foundStation);							found = true;							if (foundBottle != null) {								found = true;							}						}					}				}				else {					foundSection = sech;					foundFile = of;					// search for bottle by pressure					foundBottle = JOAFormulas.findBottleByPres(mFileViewer, foundStation);					found = true;					if (foundBottle != null) {						found = true;					}				}				break;			case 2: // JOAConstants.PREVSTN:				// go to prev station				foundStation = (Station) sech.mStations.prevElement();				if (foundStation == null) {					// go to next section					foundSection = (Section) of.mSections.prevElement();					foundFile = of;					if (foundSection != null) {						foundSection.mStations.setCurrElementToLast();						foundStation = (Station) foundSection.mStations.currElement();						foundBottle = JOAFormulas.findBottleByPres(mFileViewer, foundStation);						found = true;						if (foundBottle != null) {							found = true;						}					}					else {						// look in next file						foundFile = (OpenDataFile) mFileViewer.mOpenFiles.prevElement();						if (foundFile != null) {							foundSection = (Section) foundFile.mSections.currElement();							foundStation = (Station) foundSection.mStations.currElement();							foundBottle = JOAFormulas.findBottleByPres(mFileViewer, foundStation);							found = true;							if (foundBottle != null) {								found = true;							}						}					}				}				else {					foundSection = sech;					foundFile = of;					// search for bottle by pressure					foundBottle = JOAFormulas.findBottleByPres(mFileViewer, foundStation);					found = true;					if (foundBottle != null) {						found = true;					}				}				break;			case 3: // JOAConstants.NEXTOBS:				// go to next bottle				foundBottle = (Bottle) sh.mBottles.nextElement();				if (foundBottle != null) {					foundStation = sh;					foundSection = sech;					foundFile = of;					JOAConstants.currTestPres = foundBottle.mDValues[pPos];					found = true;				}				break;			case 4: // JOAConstants.PREVOBS:				// go to previous bottle				foundBottle = (Bottle) sh.mBottles.prevElement();				if (foundBottle != null) {					foundStation = sh;					foundSection = sech;					foundFile = of;					JOAConstants.currTestPres = foundBottle.mDValues[pPos];					found = true;				}				break;		}		// post event so other components will update		if (found) {			if (isTableChanged() || mStnMetatdataEdited) {				updateStation();			}			mFileViewer.mOpenFiles.setCurrElement(foundFile);			foundFile.mSections.setCurrElement(foundSection);			foundSection.mStations.setCurrElement(foundStation);			foundStation.mBottles.setCurrElement(foundBottle);			ObsChangedEvent oce = new ObsChangedEvent(mFileViewer);			oce.setFoundObs(foundFile, foundSection, foundStation, foundBottle);			JOAConstants.currTime = System.currentTimeMillis();			Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(oce);			// paintImmediately(new Rectangle(0, 0, 1000, 1000));			return true;		}		else {			Toolkit.getDefaultToolkit().beep();			return false;		}	}	private boolean isTableChanged() {		int numRows = mValsTable.getRowCount();		int numCols = mValsTable.getColumnCount();		for (int r = 0; r < numRows; r++) {			for (int c = 0; c < numCols; c++) {				try {					StnEditorCell cell = (StnEditorCell) mValsTable.getValueAt(r, c);					if (cell.isEdited()) { return true; }				}				catch (Exception ex) {					try {						StnEditorBottleQCCell qccell = (StnEditorBottleQCCell) mValsTable.getValueAt(r, c);						if (qccell.isEdited()) { return true; }					}					catch (Exception ex2) {					}				}			}		}		return false;	}	public void changedUpdate(DocumentEvent evt) {		mStnMetatdataEdited = true;	}	public void insertUpdate(DocumentEvent evt) {		mStnMetatdataEdited = true;	}	public void removeUpdate(DocumentEvent evt) {		mStnMetatdataEdited = true;	}	private void revertStation() {		// revert changes to vals and qc flags		int numRows = mValsTable.getRowCount();		int numCols = mValsTable.getColumnCount();		for (int r = 0; r < numRows; r++) {			StnEditorBottleQCCell qccell = (StnEditorBottleQCCell) mValsTable.getValueAt(r, 0);			if (qccell.isEdited()) {				qccell.revertCellValues();			}			for (int c = 1; c < numCols; c++) {				StnEditorCell cell = (StnEditorCell) mValsTable.getValueAt(r, c);				if (cell.isEdited()) {					cell.revertCellValues();				}			}		}	}	private void updateStation() {		// save the new metadata		applyChangesToStn();		// save changes to vals and qc flags		int numRows = mValsTable.getRowCount();		int numCols = mValsTable.getColumnCount();		for (int r = 0; r < numRows; r++) {			StnEditorBottleQCCell qccell = (StnEditorBottleQCCell) mValsTable.getValueAt(r, 0);			if (qccell.isEdited()) {				qccell.setEdited(false);				qccell.updateCellValues();			}			if (qccell.isQCStdChanged() && mCurrSec.getQCStandard() != JOAConstants.WOCE_QC_STD			    && mCurrSec.getQCStandard() != JOAConstants.IGOSS_QC_STD) {				mCurrSec.setQCStandard(qccell.getQCStd());			}			for (int c = 1; c < numCols; c++) {				StnEditorCell cell = (StnEditorCell) mValsTable.getValueAt(r, c);				if (cell.isEdited()) {					cell.setEdited(false);					cell.updateCellValues();				}				if (qccell.isQCStdChanged() && mCurrSec.getQCStandard() != JOAConstants.WOCE_QC_STD				    && mCurrSec.getQCStandard() != JOAConstants.IGOSS_QC_STD) {					mCurrSec.setQCStandard(qccell.getQCStd());				}			}		}	}	private void revertChangesToStation() {		mSectionField.setText(mCurrSec.mSectionDescription);		mSectionColor.setColor(mCurrSec.mSectionColor);		mStnNumField.setText(mCurrStn.mStnNum);		mCastNumField.setText(String.valueOf(mCurrStn.mCastNum));		mLonField.setText(JOAFormulas.formatDouble(String.valueOf(mCurrStn.mLon), 3, false));		mLatField.setText(JOAFormulas.formatDouble(String.valueOf(mCurrStn.mLat), 3, false));		mYearField.setText(String.valueOf(mCurrStn.mYear));		mMonthField.setText(String.valueOf(mCurrStn.mMonth));		mDayField.setText(String.valueOf(mCurrStn.mDay));		if (mCurrStn.mHour != JOAConstants.MISSINGVALUE) {			mHourField.setText(String.valueOf(mCurrStn.mHour));		}		else {			mHourField.setText("");		}		if (mCurrStn.mMinute != JOAConstants.MISSINGVALUE) {			mMinField.setText(String.valueOf(mCurrStn.mMinute));		}		else {			mMinField.setText("");		}		mBottomField.setText(String.valueOf(mCurrStn.mBottomDepthInDBARS));		mShipCodeField.setText(mCurrStn.mShipCode);	}	public void applyChangesToStn() {		// apply data in UI to current station		try {			String fldText = mSectionField.getText();			mCurrSec.mSectionDescription = null;			mCurrSec.mSectionDescription = new String(fldText);			mCurrSec.mSectionColor = mSectionColor.getColor();			fldText = mShipCodeField.getText();			mCurrStn.mShipCode = null;			mCurrStn.mShipCode = new String(fldText);			fldText = mStnNumField.getText();			mCurrStn.mStnNum = null;			mCurrStn.mStnNum = new String(fldText);			fldText = mCastNumField.getText();			if (fldText.length() > 0) {				mCurrStn.mCastNum = Integer.valueOf(fldText).intValue();			}			fldText = mLonField.getText();			if (fldText.length() > 0) {				mCurrStn.mLon = (Double.valueOf(fldText).doubleValue());			}			fldText = mLatField.getText();			if (fldText.length() > 0) {				mCurrStn.mLat = (Double.valueOf(fldText).doubleValue());			}			fldText = mYearField.getText();			if (fldText.length() > 0) {				mCurrStn.mYear = Integer.valueOf(fldText).intValue();			}			fldText = mMonthField.getText();			if (fldText.length() > 0) {				mCurrStn.mMonth = Integer.valueOf(fldText).intValue();			}			fldText = mDayField.getText();			if (fldText.length() > 0) {				mCurrStn.mDay = Integer.valueOf(fldText).intValue();			}			fldText = mHourField.getText();			if (fldText.length() > 0) {				mCurrStn.mHour = Integer.valueOf(fldText).intValue();			}			fldText = mMinField.getText();			if (fldText.length() > 0) {				mCurrStn.mMinute = Double.valueOf(fldText).doubleValue();			}			fldText = mBottomField.getText();			if (fldText.length() > 0) {				mCurrStn.mBottomDepthInDBARS = Integer.valueOf(fldText).intValue();			}			// fldText = mFileComments.getText();			// of.mFileComments = null;			// of.mFileComments = new String(fldText);			mFileViewer.setSavedState(JOAConstants.MODIFIEDBYUSER, mFileViewer.getCurrOutFile());			mStnMetatdataEdited = false;		}		catch (Exception ex) {		}	}	public void stnFilterChanged(StnFilterChangedEvent evt) {		if (isTableChanged() || mStnMetatdataEdited) {			updateStation();		}		OpenDataFile of = (OpenDataFile) mFileViewer.mOpenFiles.currElement();		Section sec = (Section) of.mSections.currElement();		Station stn = (Station) sec.mStations.currElement();		setNewStn(sec, stn);	}	public void itemStateChanged(ItemEvent evt) {		if (mIgnoreItemChange > 0) {			mIgnoreItemChange--;			return;		}		if (evt.getSource() instanceof JOAJComboBox) {			int numRows = mValsTable.getRowCount();			int numCols = mValsTable.getColumnCount();			JOAJComboBox cb = (JOAJComboBox) evt.getSource();			if (cb == mActions) {				int action = cb.getSelectedIndex();				if (action == 1) {					// set selection to missing					for (int r = 0; r < numRows; r++) {						if (mValsTable.isCellSelected(r, 0)) {							StnEditorBottleQCCell qccell = (StnEditorBottleQCCell) mValsTable.getValueAt(r, 0);							qccell.setNewQCValue((short) JOAConstants.MISSINGVALUE, qccell.getQCStd());							mStnValsModel.setValueAt(qccell, r, 0);						}						for (int c = 1; c < numCols; c++) {							if (mValsTable.isCellSelected(r, c)) {								StnEditorCell cell = (StnEditorCell) mValsTable.getValueAt(r, c);								cell.setNewValue(JOAConstants.MISSINGVALUE);								cell.setNewQCValue((short) JOAConstants.MISSINGVALUE, cell.getQCStd());								mStnValsModel.setValueAt(cell, r, c);							}						}					}				}				else if (action == 2) {				}				else if (action == 3) {				}				else if (action == 4) {				}			}			else if (cb == mWOCESampQCActions) {				short action = (short) mWOCESampQCActions.getSelectedIndex();				for (int r = 0; r < numRows; r++) {					if (mValsTable.isCellSelected(r, 0)) {						StnEditorBottleQCCell qccell = (StnEditorBottleQCCell) mValsTable.getValueAt(r, 0);						qccell.setNewQCValue(action, (short) JOAConstants.WOCE_QC_STD);						mStnValsModel.setValueAt(qccell, r, 0);					}				}			}			else if (cb == mWOCEValQCActions) {				short action = (short) mWOCEValQCActions.getSelectedIndex();				for (int r = 0; r < numRows; r++) {					for (int c = 1; c < numCols; c++) {						if (mValsTable.isCellSelected(r, c)) {							StnEditorCell cell = (StnEditorCell) mValsTable.getValueAt(r, c);							cell.setNewQCValue(action, (short) JOAConstants.WOCE_QC_STD);							mStnValsModel.setValueAt(cell, r, c);						}					}				}			}			else if (cb == mIGOSSQCActions) {				short action = (short) mIGOSSQCActions.getSelectedIndex();				for (int r = 0; r < numRows; r++) {					if (mValsTable.isCellSelected(r, 0)) {						StnEditorBottleQCCell qccell = (StnEditorBottleQCCell) mValsTable.getValueAt(r, 0);						qccell.setNewQCValue(action, (short) JOAConstants.IGOSS_QC_STD);						mStnValsModel.setValueAt(qccell, r, 0);					}					for (int c = 1; c < numCols; c++) {						if (mValsTable.isCellSelected(r, c)) {							StnEditorCell cell = (StnEditorCell) mValsTable.getValueAt(r, c);							cell.setNewQCValue(action, (short) JOAConstants.IGOSS_QC_STD);							mStnValsModel.setValueAt(cell, r, c);						}					}				}			}			mIgnoreItemChange++;			mIgnoreItemChange++;		}	}	private class ColumnHeaderListener extends MouseAdapter {		public void mouseClicked(MouseEvent evt) {			JTable table = ((JTableHeader) evt.getSource()).getTable();			TableColumnModel colModel = table.getColumnModel();			// The index of the column whose header was clicked			int vColIndex = colModel.getColumnIndexAtX(evt.getX());			// Return if not clicked on any column header			if (vColIndex == -1) { return; }			table.changeSelection(0, vColIndex, false, false);			table.changeSelection(mStnValsModel.getRowCount(), vColIndex, false, true);		}	}}