/* * $Id: ConfigInterpOptions.java,v 1.8 2005/09/07 18:49:31 oz Exp $ * */package javaoceanatlas.ui;import javax.swing.*;import javax.swing.event.*;import java.awt.*;import java.awt.event.*;import java.util.*;import java.io.*;import javax.swing.border.*;import javaoceanatlas.ui.widgets.*;import javaoceanatlas.utility.*;import javaoceanatlas.resources.*;import org.w3c.dom.*;import com.ibm.xml.parser.*;@SuppressWarnings("serial")public class ConfigInterpOptionsShort extends JOAJDialog implements ListSelectionListener, ActionListener, ItemListener {  protected FileViewer mFileViewer;  protected String mTitle;  protected Component mComp;  protected int mSelLevel = -1;  protected JButton mOKBtn = null;  protected JButton mCancelButton = null;  protected JButton mMakeDefaultButton = null;  protected JOAJTextField mRefLevelFld = null;  protected JOAJTextField mFarStdLevelLimitField = null;  protected JOAJTextField mFarStationField = null;  protected JOAJTextField mNumCastsField = null;  protected JOAJTextField mMaxDistField = null;  protected JOAJTextField mNumBottlesField = null;  protected JRadioButton mTopDown = null;  protected JRadioButton mBottomUp = null;  protected JCheckBox mUseDistanceLimits = null;  protected JCheckBox mFarField = null;  protected JCheckBox mFarBottle = null;  protected JCheckBox mFillEdges = null;  protected JCheckBox mClipExtrapolation = null;  protected JOAJList mRefLevels = null;  protected double mRefLevel;  protected JOAJLabel mParamLabel = null;  protected JScrollPane mListScroller = null;  protected DialogClient mClient = null;  protected NewInterpolationSurface mSurface = null;  protected boolean mFarFieldFlag;  protected boolean mFarBottleFlag;  protected String mParam;  //protected JOAJList mStnList = null;  protected JOAJList mFVList = null;  protected int mTotalStns = 0;  protected SmallIconButton checkAll = null;  protected SmallIconButton checkNone = null;  protected boolean mTopDownFlag = true;  protected boolean mFillEdgesFlag = false;  protected boolean mClipExtrapolatedFlag = true;  protected JRadioButton mNoneInterpolation;  protected JRadioButton mLocalInterpolation;  protected JRadioButton mFarFieldInterpolation;  protected int mInterpolationType = Interpolation.NO_MISSING_INTERPOLATION;  protected int mFarBottleLimit = 2;  protected int mFarStdLevelLimit = 2;  protected int mFarStationLimit = 2;  protected boolean mUseFarFieldLimit;  protected double mFarFieldLimit;  protected JOAJLabel iLabel1;  protected JOAJLabel iLabel2;  protected JOAJLabel iLabel3;  protected JOAJLabel iLabel4;  protected JOAJLabel iLabel5;  protected JOAJLabel iLabel5a;  protected JOAJLabel iLabel6;  protected JOAJLabel iLabel7;  protected JOAJLabel iLabel8;  protected JOAJLabel iLabel9;  protected JOAJLabel iLabel10;  protected JRadioButton mComputedMeanCast;  protected JRadioButton mMeanCastFromFile;  protected JRadioButton mReferenceToLevel;  protected JCheckBox mReferenceTo;  protected Vector<JOAViewer> mAllFileViewers;  public ConfigInterpOptionsShort(JFrame par, FileViewer fv, DialogClient client, NewInterpolationSurface surface,                                  String param, double refLevel, boolean topDownFlag, int interpolationType,                                  boolean fillEdges, boolean clipExtrapolated, int farBottleLimit, int farStdLevelLimit,                                  int farStationLimit, boolean useFarFieldLimit, double farFieldLimit) {    super(par, "Interpolation Options", false);    mClient = client;    mSurface = new NewInterpolationSurface(surface);    mParam = new String(param);    mFileViewer = fv;    mRefLevel = refLevel;    mInterpolationType = interpolationType;    mTopDownFlag = topDownFlag;    mFillEdgesFlag = fillEdges;    mClipExtrapolatedFlag = clipExtrapolated;    mFarBottleLimit = farBottleLimit;    mFarStdLevelLimit = farStdLevelLimit;    mFarStationLimit = farStationLimit;    mUseFarFieldLimit = useFarFieldLimit;    mFarFieldLimit = farFieldLimit;    this.init();  }  public void init() {    ResourceBundle b = ResourceBundle.getBundle("javaoceanatlas.resources.JOAResources");    // create the two parameter chooser lists    Container contents = this.getContentPane();    this.getContentPane().setLayout(new BorderLayout(0, 0));    JPanel mainPanel = new JPanel();    mainPanel.setLayout(new ColumnLayout(Orientation.LEFT, Orientation.TOP, 5));    // Options    JPanel optionsContPanel = new JPanel();    optionsContPanel.setLayout(new BorderLayout(5, 5));    TitledBorder tb = BorderFactory.createTitledBorder(b.getString("kOptions"));    if (JOAConstants.ISMAC) {      //tb.setTitleFont(new Font("Helvetica", Font.PLAIN, 11));    }    optionsContPanel.setBorder(tb);    JPanel optionsPanel = new JPanel();    optionsPanel.setLayout(new RowLayout(Orientation.LEFT, Orientation.TOP, 5));    // interp direction    JPanel interpCont = new JPanel();    interpCont.setLayout(new BorderLayout(0, 0));    JPanel interpContCont = new JPanel();    interpContCont.setLayout(new BorderLayout(0, 0));    JPanel interpDirection = new JPanel();    tb = BorderFactory.createTitledBorder(b.getString("kInterpolationDirection"));    if (JOAConstants.ISMAC) {      //tb.setTitleFont(new Font("Helvetica", Font.PLAIN, 11));    }    interpCont.setBorder(tb);    interpDirection.setLayout(new GridLayout(2, 1, 5, 0));    mTopDown = new JRadioButton(b.getString("kTopDown") + "              ", mTopDownFlag);    mBottomUp = new JRadioButton(b.getString("kBottomUp"), !mTopDownFlag);    interpDirection.add(mTopDown);    interpDirection.add(mBottomUp);    ButtonGroup bg = new ButtonGroup();    bg.add(mTopDown);    bg.add(mBottomUp);    interpCont.add("North", interpDirection);    mTopDown.addItemListener(this);    mBottomUp.addItemListener(this);    interpContCont.add("North", interpCont);    // fill edges stuff    JPanel fillEdges = new JPanel();    fillEdges.setLayout(new ColumnLayout(Orientation.LEFT, Orientation.TOP, 5));    JPanel line13 = new JPanel();    line13.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    mFillEdges = new JCheckBox(b.getString("kFillEdges"), mFillEdgesFlag);    mFillEdges.addItemListener(this);    line13.add(mFillEdges);    JPanel line14 = new JPanel();    line14.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    line14.add(new JOAJLabel("  "));    mClipExtrapolation = new JCheckBox(b.getString("kClipExtrapolation"), mClipExtrapolatedFlag);    line14.add(mClipExtrapolation);    fillEdges.add(line13);    fillEdges.add(line14);    interpContCont.add("South", fillEdges);    optionsPanel.add(interpContCont);    // far-field interpolation    JPanel missingValueOptions = new JPanel();    missingValueOptions.setLayout(new ColumnLayout(Orientation.LEFT, Orientation.TOP, 0));    tb = BorderFactory.createTitledBorder(b.getString("kMissingValueOptions"));    if (JOAConstants.ISMAC) {      //tb.setTitleFont(new Font("Helvetica", Font.PLAIN, 11));    }    missingValueOptions.setBorder(tb);    JPanel line1 = new JPanel();    line1.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line2 = new JPanel();    line2.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line3 = new JPanel();    line3.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line4 = new JPanel();    line4.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line5 = new JPanel();    line5.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line6 = new JPanel();    line6.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line7 = new JPanel();    line7.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line8 = new JPanel();    line8.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line9 = new JPanel();    line9.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line10 = new JPanel();    line10.setLayout(new FlowLayout(FlowLayout.LEFT, 3, 0));    JPanel line11 = new JPanel();    line11.setLayout(new GridLayout(1, 3, 0, 0));    // create the radio buttons    mNoneInterpolation = new JRadioButton(b.getString("kNoneInterpolation"),                                          mInterpolationType == Interpolation.NO_MISSING_INTERPOLATION);    mLocalInterpolation = new JRadioButton(b.getString("kLocalInterpolation"),                                           mInterpolationType == Interpolation.LOCAL_INTERPOLATION);    mFarFieldInterpolation = new JRadioButton(b.getString("kFarFieldInterpolation"),                                              mInterpolationType == Interpolation.FAR_FIELD_INTERPOLATION);    ButtonGroup bg2 = new ButtonGroup();    bg2.add(mNoneInterpolation);    bg2.add(mLocalInterpolation);    bg2.add(mFarFieldInterpolation);    mNoneInterpolation.addItemListener(this);    mLocalInterpolation.addItemListener(this);    mFarFieldInterpolation.addItemListener(this);    // first line--just none option    line1.add(mNoneInterpolation);    // line 2-4 are local interp    line2.add(mLocalInterpolation);    iLabel1 = new JOAJLabel("  " + b.getString("kLocalInterpHelp"));    iLabel2 = new JOAJLabel("  " + b.getString("kMaxLocalInterpDistance"));    iLabel3 = new JOAJLabel("  " + b.getString("kObsAboveBelowStdLevel2"));    line4.add(iLabel2);    //line4.add(iLabel3);    mNumBottlesField = new JOAJTextField(4);    mNumBottlesField.setText(String.valueOf(mFarBottleLimit));    mNumBottlesField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));    line4.add(mNumBottlesField);    line4.add(iLabel3);    // lines 6-10 are far field interp    line6.add(mFarFieldInterpolation);    iLabel4 = new JOAJLabel("  " + b.getString("kFFInterpHelp"));    iLabel5 = new JOAJLabel("  " + b.getString("kIfObservedNotFound"));    iLabel5a = new JOAJLabel(b.getString("kStandardLevels2"));    iLabel6 = new JOAJLabel("  " + b.getString("kUseInterpolated"));    iLabel7 = new JOAJLabel(b.getString("kStationsLeftAndRight"));    iLabel8 = new JOAJLabel(b.getString("kKM"));    //line7.add(iLabel4);    line8.add(iLabel5);    mFarStdLevelLimitField = new JOAJTextField(4);    mFarStdLevelLimitField.setText(String.valueOf(mFarStdLevelLimit));    mFarStdLevelLimitField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));    line8.add(mFarStdLevelLimitField);    line8.add(iLabel5a);    line9.add(iLabel6);    mFarStationField = new JOAJTextField(4);    mFarStationField.setText(String.valueOf(mFarStationLimit));    mFarStationField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));    line9.add(mFarStationField);    line9.add(iLabel7);    mUseDistanceLimits = new JCheckBox(b.getString("kMaxDistanceColon"), mUseFarFieldLimit);    line10.add(new JOAJLabel("  "));    line10.add(mUseDistanceLimits);    mMaxDistField = new JOAJTextField(4);    mMaxDistField.setText(String.valueOf(mFarFieldLimit));    mMaxDistField.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));    line10.add(mMaxDistField);    line10.add(iLabel8);    if (mInterpolationType == Interpolation.FAR_FIELD_INTERPOLATION) {      enableFarFieldStuff();    }    else {      disableFarFieldStuff();    }    if (mInterpolationType == Interpolation.LOCAL_INTERPOLATION) {      enableFarBottleStuff();    }    else {      disableFarBottleStuff();    }    //if (isCTDData()) {    //	mFarFieldInterpolation.setEnabled(false);    //}    missingValueOptions.add(line1);    missingValueOptions.add(line2);    //missingValueOptions.add(line3);    missingValueOptions.add(line4);    missingValueOptions.add(line5);    missingValueOptions.add(line6);    //missingValueOptions.add(line7);    missingValueOptions.add(line8);    missingValueOptions.add(line9);    missingValueOptions.add(line10);    mMakeDefaultButton = new JButton(b.getString("kMakeDefault..."));    mMakeDefaultButton.setActionCommand("defaultmv");    mMakeDefaultButton.addActionListener(this);    optionsPanel.add(missingValueOptions);    optionsContPanel.add(optionsPanel, "Center");    JPanel mdBtnsInset = new JPanel();    JPanel mdBtnsPanel = new JPanel();    mdBtnsInset.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 1));    mdBtnsPanel.setLayout(new GridLayout(1, 4, 15, 1));    mdBtnsPanel.add(mMakeDefaultButton);    mdBtnsInset.add(mdBtnsPanel);    optionsContPanel.add(mdBtnsInset, "South");    // build upper panel    mainPanel.add(optionsContPanel);    contents.add("Center", new TenPixelBorder(mainPanel, 5, 5, 5, 5));    // lower panel    mOKBtn = new JButton(b.getString("kOK"));    mOKBtn.setActionCommand("ok");    this.getRootPane().setDefaultButton(mOKBtn);    mCancelButton = new JButton(b.getString("kCancel"));    mCancelButton.setActionCommand("cancel");    JPanel dlgBtnsInset = new JPanel();    JPanel dlgBtnsPanel = new JPanel();    dlgBtnsInset.setLayout(new FlowLayout(FlowLayout.CENTER, 20, 1));    dlgBtnsPanel.setLayout(new GridLayout(1, 4, 15, 1));    if (JOAConstants.ISMAC) {      dlgBtnsPanel.add(mCancelButton);      dlgBtnsPanel.add(mOKBtn);    }    else {      dlgBtnsPanel.add(mOKBtn);      dlgBtnsPanel.add(mCancelButton);    }    dlgBtnsInset.add(dlgBtnsPanel);    mOKBtn.addActionListener(this);    mCancelButton.addActionListener(this);    contents.add(new TenPixelBorder(dlgBtnsInset, 5, 5, 5, 5), "South");    this.pack();    // show dialog at center of screen    Rectangle dBounds = this.getBounds();    Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();    int x = sd.width / 2 - dBounds.width / 2;    int y = sd.height / 2 - dBounds.height / 2;    this.setLocation(x, y);  }  public void valueChanged(ListSelectionEvent evt) {  }  public void itemStateChanged(ItemEvent evt) {    if (evt.getSource() instanceof JRadioButton) {      JRadioButton rb = (JRadioButton)evt.getSource();      if (evt.getStateChange() == ItemEvent.SELECTED && rb == mTopDown) {        mTopDownFlag = true;      }      else if (evt.getStateChange() == ItemEvent.SELECTED && rb == mBottomUp) {        mTopDownFlag = false;      }      else if (evt.getStateChange() == ItemEvent.SELECTED && rb == mNoneInterpolation) {        this.disableFarBottleStuff();        this.disableFarFieldStuff();      }      else if (evt.getStateChange() == ItemEvent.SELECTED && rb == mLocalInterpolation) {        this.enableFarBottleStuff();        this.disableFarFieldStuff();      }      else if (evt.getStateChange() == ItemEvent.SELECTED && rb == mFarFieldInterpolation) {        this.disableFarBottleStuff();        this.enableFarFieldStuff();      }    }    else if (evt.getSource() instanceof JCheckBox) {      JCheckBox cb = (JCheckBox)evt.getSource();    }  }  public void actionPerformed(ActionEvent e) {    String cmd = e.getActionCommand();    if (cmd.equals("cancel")) {      mClient.dialogCancelled(this);      this.dispose();    }    else if (cmd.equals("ok")) {      mClient.dialogDismissed(this);      this.dispose();    }    else if (cmd.equals("defaultmv")) {      save("JOADefault_gradinterp.xml");    }  }  public void saveInterpSettings(File file) {    // save preferences as XML    try {      // create a documentobject      Document doc = (Document)Class.forName("com.ibm.xml.parser.TXDocument").newInstance();      // make joapreferences the root element      Element root = doc.createElement("joainterp");      if (mTopDown.isSelected()) {        root.setAttribute("direction", "topdown");      }      else {        root.setAttribute("direction", "bottomup");      }      root.setAttribute("filledges", String.valueOf(mFillEdges.isSelected()));      root.setAttribute("clipextrapolation", String.valueOf(mClipExtrapolation.isSelected()));      if (mNoneInterpolation.isSelected()) {        Element item = doc.createElement("nointerpolation");        root.appendChild(item);      }      else if (mLocalInterpolation.isSelected()) {        Element item = doc.createElement("vertinterpolation");        item.setAttribute("maxobs", mNumBottlesField.getText());        root.appendChild(item);      }      else {        Element item = doc.createElement("horzinterpolation");        item.setAttribute("maxstdlevls", mFarStdLevelLimitField.getText());        item.setAttribute("numfarstns", mFarStationField.getText());        if (mUseDistanceLimits.isSelected()) {          item.setAttribute("maxdist", mMaxDistField.getText());        }        root.appendChild(item);      }      doc.appendChild(root);      ((TXDocument)doc).setVersion("1.0");      FileWriter fr = new FileWriter(file);      ((TXDocument)doc).printWithFormat(fr);      fr.flush();      fr.close();    }    catch (Exception ex) {      ex.printStackTrace();    }  }  public void save(String suggestedName) {    // get a filename    FilenameFilter filter = new FilenameFilter() {      public boolean accept(File dir, String name) {        if (name.endsWith("_interp.xml")) {          return true;        }        else {          return false;        }      }    };    Frame fr = new Frame();    String directory = System.getProperty("user.dir") + File.separator + "JOA_Support" + File.separator;    FileDialog f = new FileDialog(fr, "Save interpolation settings with name ending in \"_gradinterp.xml\"",                                  FileDialog.SAVE);    f.setDirectory(directory);    f.setFilenameFilter(filter);    f.setFile(suggestedName);    f.setVisible(true);    directory = f.getDirectory();    String fs = f.getFile();    f.dispose();    if (directory != null && fs != null) {      File nf = new File(directory, fs);      try {        saveInterpSettings(nf);      }      catch (Exception ex) {        ex.printStackTrace();      }    }  }  public boolean getTopDownFlag() {    return mTopDown.isSelected();  }  public int getInterpolationType() {    if (mNoneInterpolation.isSelected()) {      return Interpolation.NO_MISSING_INTERPOLATION;    }    else if (mLocalInterpolation.isSelected()) {      return Interpolation.LOCAL_INTERPOLATION;    }    else {      return Interpolation.FAR_FIELD_INTERPOLATION;    }  }  public boolean getFarFieldFlag() {    return mFarField.isSelected();  }  public boolean isFillEdges() {    return mFillEdges.isSelected();  }  public boolean isClipExtrapolated() {    return mClipExtrapolation.isSelected();  }  public int getFarBottleLimit() {    int numBottles = 0;    String fldText = mNumBottlesField.getText();    if (fldText.length() == 0) {      numBottles = 2;    }    else {      try {        numBottles = Integer.valueOf(fldText).intValue();      }      catch (NumberFormatException ex) {        numBottles = 2;      }    }    return numBottles;  }  public double getRefLevel() {    // get the reference level    String fldText = mRefLevelFld.getText();    mRefLevel = JOAConstants.MISSINGVALUE;    if (mReferenceToLevel.isSelected()) {      if (fldText.length() == 0) {        mRefLevel = JOAConstants.MISSINGVALUE;      }      else {        try {          mRefLevel = Double.valueOf(fldText).doubleValue();        }        catch (NumberFormatException ex) {          mRefLevel = JOAConstants.MISSINGVALUE;        }      }    }    return mRefLevel;  }  public int getFarStdLevelLimit() {    int numStdLevels = 0;    String fldText = mFarStdLevelLimitField.getText();    if (fldText.length() == 0) {      numStdLevels = 2;    }    else {      try {        numStdLevels = Integer.valueOf(fldText).intValue();      }      catch (NumberFormatException ex) {        numStdLevels = 2;      }    }    return numStdLevels;  }  public boolean getUseFarFieldLimitFlag() {    return mUseDistanceLimits.isSelected();  }  public double getFarFieldLimit() {    String fldText = mMaxDistField.getText();    double val;    if (fldText.length() == 0) {      val = 200.0;    }    else {      try {        val = Double.valueOf(fldText).doubleValue();      }      catch (NumberFormatException ex) {        val = 200.0;      }    }    return val;  }  public int getFarStationLimit() {    String fldText = mFarStationField.getText();    int val;    if (fldText.length() == 0) {      val = 2;    }    else {      try {        val = Integer.valueOf(fldText).intValue();      }      catch (NumberFormatException ex) {        val = 2;      }    }    return val;  }  protected void enableFarFieldStuff() {    iLabel4.setEnabled(true);    iLabel5.setEnabled(true);    iLabel5a.setEnabled(true);    iLabel6.setEnabled(true);    iLabel7.setEnabled(true);    iLabel8.setEnabled(true);    mFarStdLevelLimitField.setEnabled(true);    mFarStationField.setEnabled(true);    mUseDistanceLimits.setEnabled(true);    mMaxDistField.setEnabled(true);  }  protected void disableFarFieldStuff() {    iLabel4.setEnabled(false);    iLabel5.setEnabled(false);    iLabel5a.setEnabled(false);    iLabel6.setEnabled(false);    iLabel7.setEnabled(false);    iLabel8.setEnabled(false);    mFarStdLevelLimitField.setEnabled(false);    mFarStationField.setEnabled(false);    mUseDistanceLimits.setEnabled(false);    mMaxDistField.setEnabled(false);  }  protected void enableFarBottleStuff() {    iLabel1.setEnabled(true);    iLabel2.setEnabled(true);    iLabel3.setEnabled(true);    mNumBottlesField.setEnabled(true);  }  protected void disableFarBottleStuff() {    iLabel1.setEnabled(false);    iLabel2.setEnabled(false);    iLabel3.setEnabled(false);    mNumBottlesField.setEnabled(false);  }}