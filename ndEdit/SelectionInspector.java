/* * $Id: SelectionInspector.java,v 1.2 2005/06/17 17:24:17 oz Exp $ * * This software is provided by NOAA for full, free and open release.  It is * understood by the recipient/user that NOAA assumes no liability for any * errors contained in the code.  Although this software is released without * conditions or restrictions in its use, it is expected that appropriate * credit be given to its author and to the National Oceanic and Atmospheric * Administration should the software be included by the recipient as an * element in other product development. */package ndEdit;import java.sql.*;import javax.swing.*;import javax.swing.event.*;import java.awt.*;import java.awt.event.*;import java.util.*;import java.io.*;import java.beans.*;import javax.swing.border.*;public class SelectionInspector extends JFrame implements ActionListener, ItemListener {    protected JButton mOKBtn = null;    protected JButton mCancelButton = null;	ResourceBundle b = ResourceBundle.getBundle("ndEdit.NdEditResources");	JTextArea mResults;    public SelectionInspector() {    	super("Selection Inspector");       	this.setSize(400, 400);        this.init();	}        public void init() {    	// upper panel: holds the crtieria and the command preview    	JPanel upperPanel = new JPanel();    	upperPanel.setLayout(new BorderLayout(5, 5));    	    	// build the results panel		mResults = new JTextArea(20, 75);		mResults.setLineWrap(false);		mResults.setEditable(false);    	    	// Scroller hold the results    	MyScroller resultsScroller = new MyScroller(new TenPixelBorder(mResults, 5, 5, 5, 5));	    	    	// build the upper panel    	upperPanel.add(resultsScroller, "Center");    			// lower panel    	mCancelButton = new JButton(b.getString("kClose"));		mCancelButton.setActionCommand("cancel");       	this.getRootPane().setDefaultButton(mCancelButton);		JPanel dlgBtnsInset = new JPanel();		JPanel dlgBtnsPanel = new JPanel();        dlgBtnsInset.setLayout(new BorderLayout(5, 5));        dlgBtnsPanel.setLayout(new GridLayout(1, 5, 5, 5));        JPanel slPanel = new JPanel();        slPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 3, 0));    	if (Constants.ISMAC) {	    	dlgBtnsPanel.add(mCancelButton);		}		else {	    	dlgBtnsPanel.add(mCancelButton);		}        JPanel c = new JPanel();        c.setLayout(new FlowLayout(FlowLayout.CENTER, 3, 0));        c.add(dlgBtnsPanel);        dlgBtnsInset.add(c, "South");                mCancelButton.addActionListener(this);        this.getContentPane().add(new TenPixelBorder(upperPanel, 5, 5, 5, 5), "Center");        this.getContentPane().add(new TenPixelBorder(dlgBtnsInset, 5, 5, 5, 5), "South");				WindowListener windowListener = new WindowAdapter() {			public void windowClosing(java.awt.event.WindowEvent e) {				e.getWindow().hide();			}		};		this.addWindowListener(windowListener);    }       	        public void itemStateChanged(ItemEvent evt) {    }            	public void actionPerformed(ActionEvent e) {		String cmd = e.getActionCommand();				if (cmd.equals("cancel")) {			this.hide();		}	}		public void reset() {		mResults.setText("");	} 			public void setContents(PointerCollectionGroup pcg) {		mResults.setText("");				if (pcg.getNumSelectedPtrs() == 0)			return;					String outStr = new String("");		for (int i=0; i<pcg.getSize(); i++) {			boolean deleted = pcg.isDeleted(i);			if (deleted)				continue;			if (pcg.isSelected(i))				outStr += pcg.getString(i);		}		mResults.setText(outStr);	}    	    private class MyScroller extends JScrollPane {    	public MyScroller(Component c) {    		super(c);    		this.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);    		this.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);    	}    	    	public Dimension getPreferredSize() {        	return new Dimension(210, 150);    	}    }}