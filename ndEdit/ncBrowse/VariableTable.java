/* * $Id: VariableTable.java,v 1.3 2005/02/15 18:31:11 oz Exp $ * * This software is provided by NOAA for full, free and open release.  It is * understood by the recipient/user that NOAA assumes no liability for any * errors contained in the code.  Although this software is released without * conditions or restrictions in its use, it is expected that appropriate * credit be given to its author and to the National Oceanic and Atmospheric * Administration should the software be included by the recipient as an * element in other product development. */package ndEdit.ncBrowse;import ndEdit.*;import javax.swing.*;import javax.swing.table.TableColumn;import javax.swing.table.AbstractTableModel;import java.util.Vector;import java.util.Enumeration;import java.util.Iterator;//  import ucar.netcdf.DimensionIterator;//  import ucar.netcdf.VariableIterator;//  import ucar.netcdf.Variable;//  import ucar.netcdf.Attribute;import ucar.nc2.Variable;import ucar.nc2.Attribute;/** * Creates a <code>JTable</code> summarizing netCDF variables. * * @author Donald Denbo * @version $Revision: 1.3 $, $Date: 2005/02/15 18:31:11 $ */public class VariableTable extends JTable {	public static final int ALL = 1;	public static final int NON_DIMENSION = 2;	public static final int DIMENSION = 3;	private NcFile ncFile = null;	private int type = NON_DIMENSION;	private boolean mShowDims = true;	public VariableTable(NcFile ncFile) {		this(ncFile, ALL);	}	public VariableTable(NcFile ncFile, int type) {		super();		this.ncFile = ncFile;		this.type = type;		setSelectionMode(ListSelectionModel.SINGLE_SELECTION);		makeVariableTable();	}	public VariableTable(NcFile ncFile, int type, boolean showDims, int selMode) {		super();		this.ncFile = ncFile;		this.type = type;		mShowDims = showDims;		setSelectionMode(selMode);		makeVariableTable();	}	private void makeVariableTable() {		this.putClientProperty("Quaqua.Table.style", "striped");	    Attribute att = null;	    Vector names = new Vector(10, 10);	    Vector values = new Vector(10, 10);	    Vector dims = new Vector(10, 10);	//      VariableIterator varIter = null;	    Iterator varIter = null;	    if (type == NON_DIMENSION) {			varIter = ncFile.getNonDimensionVariables();	    } 	    else if(type == DIMENSION) {			varIter = ncFile.getDimensionVariables();	    } 	    else {	      //      varIter = ncFile.iterator();	      varIter = ncFile.getVariableIterator();	    }		while(varIter.hasNext()) {			Variable var = (Variable)varIter.next();			StringBuffer sbuf = new StringBuffer();			names.addElement(var.getName());			att = var.findAttribute("long_name");			if(att != null) {				sbuf.append(stripBlanks(att.getStringValue()));				sbuf.append("; ");			}			att = var.findAttribute("units");			if(att != null) {				sbuf.append("(");				sbuf.append(att.getStringValue());				sbuf.append(")");			} 			else {				sbuf.append(" ");			}			values.addElement(sbuf.toString());			sbuf = new StringBuffer();			sbuf.append("[");			Iterator di = var.getDimensions().iterator();			int dimCount = 0;			while(di.hasNext()) {				ucar.nc2.Dimension dim = (ucar.nc2.Dimension)di.next();				sbuf.append(dim.getName()+",");				dimCount++;			}			if(dimCount <= 0) {				sbuf.append("no dimensions found]");	      	} 	      	else {				sbuf.setCharAt(sbuf.length()-1, ']');	      	}	      //      sbuf.deleteCharAt(sbuf.length()-1);	      //      sbuf.append("]");	      dims.addElement(sbuf.toString());		}	    Vector sortednames = new Vector(10, 10);	    Vector sortedvalues = new Vector(10, 10);	    Vector sorteddims = new Vector(10, 10);	    boolean[] moved = new boolean[names.size()];	    	    for (int i=0; i<moved.length; i++) {	    	moved[i] = false;	    }	    				// sort parameters into canonical order if possible		   		// PRES, TEMP, SALT, O2, SIO3, NO3, PO4	    	    	    int numMoved = 0;	    int currPos = 0;	    boolean movedIt = false;	    for (int i=0; i<names.size(); i++) {	    	String vname = (String)names.elementAt(i);	    	String joaName = NdEditFormulas.paramNameToJOAName(vname.toUpperCase());	    	if (joaName.startsWith("TEMP")) {	    		sortednames.addElement(vname);	    		sortedvalues.addElement((String)values.elementAt(i));	    		sorteddims.addElement((String)dims.elementAt(i));	    		moved[i] = true;	    		numMoved++;	    		movedIt = true;	    		break;	    	}	    }	    	    if (movedIt) {	    	currPos++;	    	movedIt = false;	    }	    	    for (int i=0; i<names.size(); i++) {	    	String vname = (String)names.elementAt(i);	    	if (NdEditFormulas.paramNameToJOAName(vname.toUpperCase()).startsWith("SALT")) {	    		sortednames.addElement(vname);	    		sortedvalues.addElement((String)values.elementAt(i));	    		sorteddims.addElement((String)dims.elementAt(i));	    		moved[i] = true;	    		numMoved++;	    		movedIt = true;	    		break;	    	}	    }	    	    if (movedIt) {	    	currPos++;	    	movedIt = false;	    }	    	    for (int i=0; i<names.size(); i++) {	    	String vname = (String)names.elementAt(i);	    	if (NdEditFormulas.paramNameToJOAName(vname.toUpperCase()).startsWith("O2")) {	    		sortednames.addElement(vname);	    		sortedvalues.addElement((String)values.elementAt(i));	    		sorteddims.addElement((String)dims.elementAt(i));	    		moved[i] = true;	    		numMoved++;	    		movedIt = true;	    		break;	    	}	    }	    	    if (movedIt) {	    	currPos++;	    	movedIt = false;	    }	    	    for (int i=0; i<names.size(); i++) {	    	String vname = (String)names.elementAt(i);	    	if (NdEditFormulas.paramNameToJOAName(vname.toUpperCase()).startsWith("SIO3")) {	    		sortednames.addElement(vname);	    		sortedvalues.addElement((String)values.elementAt(i));	    		sorteddims.addElement((String)dims.elementAt(i));	    		moved[i] = true;	    		numMoved++;	    		movedIt = true;	    		break;	    	}	    }	    	    if (movedIt) {	    	currPos++;	    	movedIt = false;	    }	    	    for (int i=0; i<names.size(); i++) {	    	String vname = (String)names.elementAt(i);	    	if (NdEditFormulas.paramNameToJOAName(vname.toUpperCase()).startsWith("NO3")) {	    		sortednames.addElement(vname);	    		sortedvalues.addElement((String)values.elementAt(i));	    		sorteddims.addElement((String)dims.elementAt(i));	    		moved[i] = true;	    		numMoved++;	    		movedIt = true;	    		break;	    	}	    }	    	    if (movedIt) {	    	currPos++;	    	movedIt = false;	    }	    	    for (int i=0; i<names.size(); i++) {	    	String vname = (String)names.elementAt(i);	    	if (NdEditFormulas.paramNameToJOAName(vname.toUpperCase()).startsWith("PO4")) {	    		sortednames.addElement(vname);	    		sortedvalues.addElement((String)values.elementAt(i));	    		sorteddims.addElement((String)dims.elementAt(i));	    		moved[i] = true;	    		numMoved++;	    		movedIt = true;	    		break;	    	}	    }    	    	    // collect any unassigned variables	    for (int i=0; i<names.size(); i++) {	    	if (!moved[i]) {	    		currPos++;	    		sortednames.addElement((String)names.elementAt(i));	    		sortedvalues.addElement((String)values.elementAt(i));	    		sorteddims.addElement((String)dims.elementAt(i));	    	}	    }			Enumeration enames = sortednames.elements();		Enumeration evalues = sortedvalues.elements();		Enumeration edims = sorteddims.elements();		String[][] data = new String[sortednames.size()][3];		for(int i=0; i < sortednames.size(); i++) {		  data[i][0] = (String)enames.nextElement();		  data[i][1] = (String)evalues.nextElement();		  data[i][2] = (String)edims.nextElement();		}		if (mShowDims) {			VarTableModel vtm = new VarTableModel(data, new String[] 			  {"Name", "Description", "Dimensions"});			setModel(vtm);			//setSize(1000,1000);			TableColumn tc;			tc = getColumnModel().getColumn(0);			tc.setPreferredWidth(100);			tc = getColumnModel().getColumn(1);			tc.setPreferredWidth(200);			tc = getColumnModel().getColumn(2);			tc.setPreferredWidth(100);		}		else {			VarTableModel vtm = new VarTableModel(data, new String[] 			  {"Name", "Description"});			setModel(vtm);			//setSize(1000,1000);			TableColumn tc;			tc = getColumnModel().getColumn(0);			tc.setPreferredWidth(100);			tc = getColumnModel().getColumn(1);			tc.setPreferredWidth(200);		}	}  	public String stripBlanks(String in) {		StringBuffer sbuf = new StringBuffer(in);		int len;		int i;		len = sbuf.length();		// remove trailing blanks		for(i=len - 1; i>=0; i--) {		  if(sbuf.charAt(i) != ' ') {			len = i+1;			break;			}		}	    sbuf.setLength(len);	    return sbuf.toString();	}	  class VarTableModel extends AbstractTableModel {    String[] colNames;    String[][] data;    public VarTableModel(String[][] data, String[] columnNames) {      this.data = data;      this.colNames = columnNames;      if(Debug.DEBUG) System.out.println("data.length = " + data.length					 + ", colNames.length = " 					 + colNames.length);    }    public int getRowCount() {      return data.length;    }    public int getColumnCount() {      return colNames.length;    }    public Object getValueAt(int row, int column) {      return data[row][column];    }    public String getColumnName(int column) {      return colNames[column];    }  }}